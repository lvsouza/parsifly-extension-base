{"version":3,"file":"index.cjs.js","sources":["../src/lib/shared/components/PlatformActions.ts","../src/lib/shared/providers/ListProvider.ts","../src/lib/shared/components/TabsView.ts","../src/lib/shared/components/TabView.ts","../src/lib/shared/components/Action.ts","../src/lib/shared/components/Editor.ts","../src/lib/shared/components/View.ts","../src/lib/Envs.ts","../src/lib/shared/services/EventLink.ts","../src/lib/data-providers/index.ts","../src/lib/ExtensionBase.ts","../src/lib/shared/components/ListViewItem.ts","../src/lib/shared/components/Parser.ts"],"sourcesContent":["type TBaseAction = {\n  key: string;\n};\n\ntype TSingleAction = {\n  action(): Promise<void>;\n};\n\ntype TMultiAction = {\n  actions: (TBaseAction & TSingleAction)[];\n};\n\nexport type TPlatformAction = TBaseAction & (TSingleAction | TMultiAction);\n\nexport class PlatformAction {\n  key: TPlatformAction['key'];\n  action?: TSingleAction['action'];\n  actions?: TMultiAction['actions'];\n\n  constructor(props: TPlatformAction) {\n    this.key = props.key;\n\n    if ('action' in props) {\n      this.action = props.action;\n    }\n\n    if ('actions' in props) {\n      this.actions = props.actions;\n    }\n  }\n\n  isSingle(): this is TBaseAction & TSingleAction {\n    return typeof this.action === 'function';\n  }\n\n  isMulti(): this is TBaseAction & TMultiAction {\n    return Array.isArray(this.actions);\n  }\n}\n","import { ListViewItem } from '../components/ListViewItem';\n\n\ninterface IListProviderProps {\n  key: string;\n  onItemClick?: (item: ListViewItem) => Promise<void>;\n  onItemDoubleClick?: (item: ListViewItem) => Promise<void>;\n  getItems: (item?: ListViewItem) => Promise<ListViewItem[]>;\n}\nexport class ListProvider {\n  public readonly key: IListProviderProps['key'];\n  public readonly getItems: IListProviderProps['getItems'];\n  public readonly onItemClick: IListProviderProps['onItemClick'];\n  public readonly onItemDoubleClick: IListProviderProps['onItemDoubleClick'];\n\n  constructor(props: IListProviderProps) {\n    this.key = props.key;\n    this.getItems = props.getItems;\n    this.onItemClick = props.onItemClick;\n    this.onItemDoubleClick = props.onItemDoubleClick;\n  }\n}\n","import { TabView } from './TabView';\nimport { Action } from './Action';\n\n\ninterface ITabsViewProps {\n  key: string;\n  tabs: TabView[];\n  actions?: Action[];\n}\nexport class TabsView {\n  public readonly key: ITabsViewProps['key'];\n  public readonly tabs: ITabsViewProps['tabs'];\n  public readonly actions: ITabsViewProps['actions'];\n\n  constructor(props: ITabsViewProps) {\n    this.key = props.key;\n    this.tabs = props.tabs;\n    this.actions = props.actions;\n  }\n}\n","import { ListProvider } from '../providers/ListProvider';\n\n\ninterface ITabViewProps {\n  key: string;\n  dataProvider: ListProvider;\n}\nexport class TabView {\n  public readonly key: ITabViewProps['key'];\n  public readonly dataProvider: ITabViewProps['dataProvider'];\n\n  constructor(props: ITabViewProps) {\n    this.key = props.key;\n    this.dataProvider = props.dataProvider;\n  }\n}\n","\ninterface IActionProps {\n  key: string;\n  action(): Promise<void>;\n}\nexport class Action {\n  public readonly key: IActionProps['key'];\n  public readonly action: IActionProps['action'];\n\n  constructor(props: IActionProps) {\n    this.key = props.key;\n    this.action = props.action;\n  }\n}\n","import { Action } from './Action';\n\n\ninterface IEditorProps {\n  key: string;\n  actions?: Action[];\n  /**\n   * Listem for change of the item id that is edit in the moment\n   * \n   * @param id Id of the content to be edited\n   */\n  resolve?: (id: string) => Promise<void>;\n  onDidReceiveMessage?: (...values: unknown[]) => Promise<void>;\n}\nexport class Editor {\n  private readonly _messageSenderListeners = new Map<string, ((...values: unknown[]) => Promise<unknown>)>();\n\n\n  public readonly key: IEditorProps['key'];\n  public readonly actions: IEditorProps['actions'];\n  public readonly resolve: IEditorProps['resolve'];\n  public readonly onDidReceiveMessage: IEditorProps['onDidReceiveMessage'];\n\n\n  public readonly webView = {\n    sendMessage: async (...values: unknown[]) => {\n      this._messageSenderListeners.forEach(listener => listener(...values));\n    },\n  } as const\n\n  constructor(props: IEditorProps) {\n    this.key = props.key;\n    this.actions = props.actions;\n    this.resolve = props.resolve;\n    this.onDidReceiveMessage = props.onDidReceiveMessage;\n  }\n\n\n  public __internal_subscribeToSend(key: string, fn: ((...values: unknown[]) => Promise<unknown>)) {\n    this._messageSenderListeners.set(key, fn);\n  }\n  public __internal_removeSubscribeToSend(key: string) {\n    this._messageSenderListeners.delete(key);\n  }\n}\n","import { ListProvider } from '../providers/ListProvider';\nimport { Action } from './Action';\n\n\ninterface IViewProps {\n  key: string;\n  actions?: Action[];\n  dataProvider: ListProvider;\n}\nexport class View {\n  public readonly key: IViewProps['key'];\n  public readonly actions: IViewProps['actions'];\n  public readonly dataProvider: IViewProps['dataProvider'];\n\n  constructor(props: IViewProps) {\n    this.key = props.key;\n    this.actions = props.actions;\n    this.dataProvider = props.dataProvider;\n  }\n}\n","\n\nexport const Envs = {\n  DEBUG: false,\n};\n","import * as ComLink from 'comlink';\n\nimport { Envs } from '../../Envs';\n\n\ntype TEvent<GParams = unknown, GReturn = unknown> = (...params: GParams[]) => Promise<GReturn>;\n\nexport class EventLink {\n  private _events: Map<string, TEvent<any, any>> = new Map();\n  private _studioWrapper: Record<'callEvent', (...args: unknown[]) => Promise<unknown>>;\n\n\n  constructor() {\n    ComLink.expose({ callEvent: this._callExtensionEvent.bind(this) });\n\n    this._studioWrapper = ComLink.wrap(self as any);\n  }\n\n\n  public setExtensionEvent<GParams = unknown, GReturn = unknown>(key: string, event: TEvent<GParams, GReturn>) {\n    this._events.set(key, event);\n  }\n  public removeExtensionEvent(key: string) {\n    this._events.delete(key);\n  }\n\n  public async callStudioEvent<GParams = unknown, GReturn = unknown>(key: string, ...params: GParams[]): Promise<GReturn> {\n    return this._studioWrapper.callEvent(key, ...params) as Promise<GReturn>;\n  }\n\n\n  private async _callExtensionEvent<GParams = unknown, GReturn = unknown>(key: string, ...params: GParams[]): Promise<GReturn> {\n    const event = this._events.get(key);\n\n    if (Envs.DEBUG) {\n      console.log(this._events.keys());\n    }\n\n    if (!event) {\n      throw new Error(`[EXTENSION] Event with key \"${key}\" was not found.`);\n    }\n\n    return event(...params);\n  }\n}\n","import { EventLink } from '../shared/services/EventLink';\nimport { IComponent } from './interfaces/IComponent';\nimport { IProject } from './interfaces/IProject';\nimport { IService } from './interfaces/IService';\nimport { IPage } from './interfaces/IPage';\n\n\n\nexport const createDataProviders = (eventLink: EventLink) => {\n  return {\n    /**\n     * Allow you to call a custom command from application\n     * \n     * @param key Name of the command\n     * @param args List of arguments to be forwarded to the command call\n     */\n    callCustomDataProvider: async <GParam = unknown, GReturn = unknown>(key: string, ...args: GParam[]): Promise<GReturn> => {\n      return await eventLink.callStudioEvent(key, ...args);\n    },\n    /**\n     * Allow you to get the entire project object or get parts with ...project.pages(), .services(), .components() and more.\n     */\n    project: Object.assign(\n      async (): Promise<IProject<'application' | 'package'>> => {\n        return await eventLink.callStudioEvent<void, IProject<'application' | 'package'>>('project:get');\n      },\n      {\n        set: async (project: IProject<'application' | 'package'>): Promise<void> => {\n          return await eventLink.callStudioEvent<IProject<'application' | 'package'>, void>('project:set', project);\n        },\n\n        pages: Object.assign(\n          async (): Promise<IPage[]> => {\n            return await eventLink.callStudioEvent<void, IPage[]>('project.pages:get');\n          },\n          async (index: number): Promise<IPage> => {\n            return await eventLink.callStudioEvent<number, IPage>('project.pages:get', index);\n          },\n          {\n            set: async (page: IPage, index: number): Promise<void> => {\n              return await eventLink.callStudioEvent<IPage | number, void>('project.pages:set', page, index);\n            },\n            add: Object.assign(\n              async (page: IPage): Promise<void> => {\n                return await eventLink.callStudioEvent<IPage, void>('project.pages:add', page);\n              },\n              async (page: IPage, index: number): Promise<void> => {\n                return await eventLink.callStudioEvent<IPage | number, void>('project.pages:add', page, index);\n              },\n            ),\n            del: Object.assign(\n              async (): Promise<void> => {\n                return await eventLink.callStudioEvent<void, void>('project.pages:del');\n              },\n              async (index: number): Promise<void> => {\n                return await eventLink.callStudioEvent<number, void>('project.pages:del', index);\n              },\n            )\n          }\n        ),\n        components: Object.assign(\n          async (): Promise<IComponent[]> => {\n            return await eventLink.callStudioEvent<void, IComponent[]>('project.components:get');\n          },\n          async (index: number): Promise<IComponent> => {\n            return await eventLink.callStudioEvent<number, IComponent>('project.components:get', index);\n          },\n          {\n            set: async (component: IComponent, index: number): Promise<void> => {\n              return await eventLink.callStudioEvent<IComponent | number, void>('project.components:set', component, index);\n            },\n            add: Object.assign(\n              async (component: IComponent): Promise<void> => {\n                return await eventLink.callStudioEvent<IComponent, void>('project.components:add', component);\n              },\n              async (component: IComponent, index: number): Promise<void> => {\n                return await eventLink.callStudioEvent<IComponent | number, void>('project.components:add', component, index);\n              },\n            ),\n            del: Object.assign(\n              async (): Promise<void> => {\n                return await eventLink.callStudioEvent<void, void>('project.components:del');\n              },\n              async (index: number): Promise<void> => {\n                return await eventLink.callStudioEvent<number, void>('project.components:del', index);\n              },\n            )\n          }\n        ),\n        services: Object.assign(\n          async (): Promise<IService[]> => {\n            return await eventLink.callStudioEvent<void, IService[]>('project.services:get');\n          },\n          async (index: number): Promise<IService> => {\n            return await eventLink.callStudioEvent<number, IService>('project.services:get', index);\n          },\n          {\n            set: async (service: IService, index: number): Promise<void> => {\n              return await eventLink.callStudioEvent<IService | number, void>('project.services:set', service, index);\n            },\n            add: Object.assign(\n              async (service: IService): Promise<void> => {\n                return await eventLink.callStudioEvent<IService, void>('project.services:add', service);\n              },\n              async (service: IService, index: number): Promise<void> => {\n                return await eventLink.callStudioEvent<IService | number, void>('project.services:add', service, index);\n              },\n            ),\n            del: Object.assign(\n              async (): Promise<void> => {\n                return await eventLink.callStudioEvent<void, void>('project.services:del');\n              },\n              async (index: number): Promise<void> => {\n                return await eventLink.callStudioEvent<number, void>('project.services:del', index);\n              },\n            )\n          }\n        ),\n      }\n    ),\n  } as const;\n}\n","import { PlatformAction } from './shared/components/PlatformActions';\r\nimport { TabsView } from './shared/components/TabsView';\r\nimport { EventLink } from './shared/services/EventLink';\r\nimport { createDataProviders } from './data-providers';\r\nimport { TFileOrFolder } from './types/TFileOrFolder';\r\nimport { Parser } from './shared/components/Parser';\r\nimport { Editor } from './shared/components/Editor';\r\nimport { TQuickPick } from './types/TQuickPick';\r\nimport { View } from './shared/components/View';\r\n\r\n\r\nexport abstract class ExtensionBase {\r\n  private _eventLink: EventLink = new EventLink();\r\n\r\n\r\n  constructor() {\r\n    this._eventLink.setExtensionEvent('activate', this.activate.bind(this));\r\n    this._eventLink.setExtensionEvent('deactivate', this.deactivate.bind(this));\r\n  }\r\n\r\n\r\n  /**\r\n   * Automatically called when the extension start.\r\n   */\r\n  async activate(): Promise<void> {\r\n    console.log('Extension activated (base implementation).');\r\n  }\r\n\r\n  /**\r\n   * Automatically called when the extension stop.\r\n   */\r\n  async deactivate(): Promise<void> {\r\n    console.log('Extension deactivated (base implementation).');\r\n  }\r\n\r\n  public readonly application = {\r\n    platformActions: {\r\n      register: (platformAction: PlatformAction) => {\r\n        if (platformAction.action) {\r\n          this._eventLink.setExtensionEvent(`platformActions:${platformAction.key}`, platformAction.action);\r\n        } else if (platformAction.actions) {\r\n          platformAction.actions.forEach(action => {\r\n            this._eventLink.setExtensionEvent(`platformActions:${platformAction.key}:actions:${action.key}`, action.action);\r\n          });\r\n        }\r\n      },\r\n      unregister: (platformAction: PlatformAction) => {\r\n        if (platformAction.action) {\r\n          this._eventLink.removeExtensionEvent(`platformActions:${platformAction.key}`);\r\n        } else if (platformAction.actions) {\r\n          platformAction.actions.forEach(action => {\r\n            this._eventLink.removeExtensionEvent(`platformActions:${platformAction.key}:actions:${action.key}`);\r\n          });\r\n        }\r\n      },\r\n    },\r\n    parsers: {\r\n      register: (parser: Parser) => {\r\n        this._eventLink.setExtensionEvent(`parsers:${parser.key}`, parser.parser);\r\n      },\r\n      unregister: (parser: Parser) => {\r\n        this._eventLink.removeExtensionEvent(`parsers:${parser.key}`);\r\n      },\r\n    },\r\n    views: {\r\n      refresh: async (view: View | TabsView) => {\r\n        await this._eventLink.callStudioEvent(`views:${view.key}:refresh`);\r\n      },\r\n      register: (view: View | TabsView) => {\r\n        if (view instanceof TabsView) {\r\n          view.tabs.forEach(tabView => {\r\n            this._eventLink.setExtensionEvent(`views:${view.key}:tabsView:${tabView.key}:loadItems:${tabView.dataProvider.key}`, tabView.dataProvider.getItems);\r\n            if (tabView.dataProvider.onItemClick) this._eventLink.setExtensionEvent(`views:${view.key}:tabsView:${tabView.key}:onItemClick:${tabView.dataProvider.key}`, tabView.dataProvider.onItemClick);\r\n            if (tabView.dataProvider.onItemDoubleClick) this._eventLink.setExtensionEvent(`views:${view.key}:tabsView:${tabView.key}:onItemDoubleClick:${tabView.dataProvider.key}`, tabView.dataProvider.onItemDoubleClick);\r\n          })\r\n          view.actions?.forEach(action => {\r\n            this._eventLink.setExtensionEvent(`views:${view.key}:actions:${action.key}`, action.action);\r\n          });\r\n        } else {\r\n          this._eventLink.setExtensionEvent(`views:${view.key}:loadItems:${view.dataProvider.key}`, view.dataProvider.getItems);\r\n          if (view.dataProvider.onItemClick) this._eventLink.setExtensionEvent(`views:${view.key}:onItemClick:${view.dataProvider.key}`, view.dataProvider.onItemClick);\r\n          if (view.dataProvider.onItemDoubleClick) this._eventLink.setExtensionEvent(`views:${view.key}:onItemDoubleClick:${view.dataProvider.key}`, view.dataProvider.onItemDoubleClick);\r\n          view.actions?.forEach(action => {\r\n            this._eventLink.setExtensionEvent(`views:${view.key}:actions:${action.key}`, action.action);\r\n          });\r\n        }\r\n      },\r\n      unregister: (view: View | TabsView) => {\r\n        if (view instanceof TabsView) {\r\n          view.tabs.forEach(tabView => {\r\n            this._eventLink.removeExtensionEvent(`views:${view.key}:tabsView:${tabView.key}:loadItems:${tabView.dataProvider.key}`);\r\n            if (tabView.dataProvider.onItemClick) this._eventLink.removeExtensionEvent(`views:${view.key}:tabsView:${tabView.key}:onItemClick:${tabView.dataProvider.key}`);\r\n            if (tabView.dataProvider.onItemDoubleClick) this._eventLink.removeExtensionEvent(`views:${view.key}:tabsView:${tabView.key}:onItemDoubleClick:${tabView.dataProvider.key}`);\r\n          })\r\n          view.actions?.forEach(action => {\r\n            this._eventLink.removeExtensionEvent(`views:${view.key}:actions:${action.key}`);\r\n          });\r\n        } else {\r\n          this._eventLink.removeExtensionEvent(`views:${view.key}:loadItems:${view.dataProvider.key}`);\r\n          if (view.dataProvider.onItemClick) this._eventLink.removeExtensionEvent(`views:${view.key}:onItemClick:${view.dataProvider.key}`);\r\n          if (view.dataProvider.onItemDoubleClick) this._eventLink.removeExtensionEvent(`views:${view.key}:onItemDoubleClick:${view.dataProvider.key}`);\r\n          view.actions?.forEach(action => {\r\n            this._eventLink.removeExtensionEvent(`views:${view.key}:actions:${action.key}`);\r\n          });\r\n        }\r\n      },\r\n    },\r\n    editors: {\r\n      /**\r\n       * Allow you to open a item in a editor based on the item type\r\n       * \r\n       * @param key Identifier of a item to be opened for some editor\r\n       */\r\n      open: async (key: string) => {\r\n        await this._eventLink.callStudioEvent(`editors:open`, key);\r\n      },\r\n      register: (view: Editor) => {\r\n        this._eventLink.setExtensionEvent(`editors:${view.key}:resolve`, async (id: string) => view.resolve?.(id));\r\n        this._eventLink.setExtensionEvent(`editors:${view.key}:forwardEvents:receive`, async (...values) => view.onDidReceiveMessage?.(...values));\r\n\r\n        view.__internal_subscribeToSend(`editors:${view.key}:forwardEvents:send`, async (...values) => {\r\n          return await this._eventLink.callStudioEvent(`editors:${view.key}:forwardEvents:send`, ...values);\r\n        });\r\n\r\n        view.actions?.forEach(action => {\r\n          this._eventLink.setExtensionEvent(`editors:${view.key}:actions:${action.key}`, action.action);\r\n        });\r\n      },\r\n      unregister: (view: Editor) => {\r\n        this._eventLink.removeExtensionEvent(`editors:${view.key}:resolve`);\r\n        this._eventLink.removeExtensionEvent(`editors:${view.key}:forwardEvents:receive`);\r\n\r\n        view.__internal_removeSubscribeToSend(`editors:${view.key}:forwardEvents:send`);\r\n\r\n        view.actions?.forEach(action => {\r\n          this._eventLink.removeExtensionEvent(`editors:${view.key}:actions:${action.key}`);\r\n        });\r\n      },\r\n    },\r\n    commands: {\r\n      /**\r\n       * Allow you to call a custom command from application\r\n       * \r\n       * @param key Name of the command\r\n       * @param args List of arguments to be forwarded to the command call\r\n       */\r\n      callCustomCommand: async <GParam = unknown, GReturn = unknown>(key: string, ...args: GParam[]): Promise<GReturn> => {\r\n        return await this._eventLink.callStudioEvent(key, ...args);\r\n      },\r\n      /**\r\n       * Allow you to download some content in a file\r\n       * \r\n       * @param fileName Name of the generated file\r\n       * @param fileType extension of the file\r\n       * @param fileContent file content in string\r\n       */\r\n      downloadFile: async (fileName: string, fileType: string, fileContent: string): Promise<void> => {\r\n        return await this._eventLink.callStudioEvent<string, void>('download:file', fileName, fileType, fileContent);\r\n      },\r\n      /**\r\n       * Allow you to download a lot of files and folders as zip\r\n       * \r\n       * @param downloadName Name of the download as zip\r\n       * @param files List of files or folders to download\r\n       */\r\n      downloadFiles: async (downloadName: string, files: TFileOrFolder[]): Promise<void> => {\r\n        return await this._eventLink.callStudioEvent<string | TFileOrFolder[], void>('download:files', downloadName, files);\r\n      },\r\n      /**\r\n       * Grouped methods to editor configuration\r\n       */\r\n      editor: {\r\n        /**\r\n         * Allow to show some feedback to the platform user\r\n         * \r\n         * @param message Message of the feedback\r\n         * @param type type of the feedback\r\n         */\r\n        feedback: async (message: string, type: \"warning\" | \"success\" | \"error\" | \"info\"): Promise<void> => {\r\n          return await this._eventLink.callStudioEvent<string, void>('editor:feedback', message, type);\r\n        },\r\n        /**\r\n         * Allow to capture user freeform text input\r\n         * \r\n         * @param props Props to configure the quick pick\r\n         */\r\n        showQuickPick: async (props: TQuickPick): Promise<string | void> => {\r\n          return await this._eventLink.callStudioEvent<TQuickPick, string | void>('editor:quickPick:show', props);\r\n        },\r\n        /**\r\n         * Allow to set primary side bar view by key\r\n         * \r\n         * @param key Key to identify the view to show in the side bar\r\n         */\r\n        showPrimarySideBarByKey: async (key: string): Promise<void> => {\r\n          return await this._eventLink.callStudioEvent<string, void>('editor:primarySideBar:showByKey', key);\r\n        },\r\n        /**\r\n         * Allow to set secondary side bar view by key\r\n         * \r\n         * @param key Key to identify the view to show in the side bar\r\n         */\r\n        showSecondarySideBarByKey: async (key: string): Promise<void> => {\r\n          return await this._eventLink.callStudioEvent<string, void>('editor:secondarySideBar:showByKey', key);\r\n        },\r\n      }\r\n    },\r\n    dataProviders: createDataProviders(this._eventLink),\r\n  } as const;\r\n}\r\n","\ntype TListItemBase = {\n  /** Identifier */\n  key: string;\n  /** VS Code icons */\n  icon?: string;\n  /** Show additional information in bold */\n  extra?: string;\n  /** Details of the record */\n  description?: string;\n}\n\ntype TListItemWithTitle = {\n  label?: undefined;\n  children?: false | undefined;\n  /** Title, main information for the record  */\n  title: string;\n}\n\ntype TListItemWithLabel = {\n  /** Label, main information for the record  */\n  label: string;\n  title?: undefined;\n  /** Define if a item can have a children list */\n  children: boolean;\n}\n\nexport type TListViewItem = (TListItemWithLabel | TListItemWithTitle) & TListItemBase;\n\nexport class ListViewItem {\n  public readonly key: TListItemBase['key'];\n  public readonly icon?: TListItemBase['icon'];\n  public readonly extra?: TListItemBase['extra'];\n  public readonly description?: TListItemBase['description'];\n\n  public readonly title?: TListViewItem['title'];\n  public readonly label?: TListViewItem['label'];\n  public readonly children?: TListViewItem['children'];\n\n\n  constructor(props: TListViewItem) {\n    this.key = props.key;\n    this.icon = props.icon;\n    this.extra = props.extra;\n    this.description = props.description;\n\n    if ('title' in props && props.title !== undefined) {\n      this.title = props.title;\n    }\n\n    if ('label' in props && props.label !== undefined) {\n      this.label = props.label;\n    }\n\n    if ('children' in props && props.children !== undefined) {\n      this.children = props.children;\n    }\n\n    if ((this.title && this.label) || (!this.title && !this.label)) {\n      throw new Error(\"ListViewItem must have either a `title` or a `label`, but not both.\");\n    }\n  }\n}\n","import { TFileOrFolder } from '../../types/TFileOrFolder';\n\n\ntype TParserResult = {\n  name: string;\n  content: string | TFileOrFolder;\n}\n\nexport type TParser = {\n  key: string;\n  parser: () => Promise<TParserResult>;\n}\nexport class Parser {\n  public readonly key: TParser['key'];\n  public readonly parser: TParser['parser'];\n\n  constructor(props: TParser) {\n    this.key = props.key;\n    this.parser = props.parser;\n  }\n}\n"],"names":["PlatformAction","props","ListProvider","TabsView","TabView","Action","Editor","values","listener","key","fn","View","Envs","EventLink","ComLink.expose","ComLink.wrap","event","params","createDataProviders","eventLink","args","project","index","page","component","service","ExtensionBase","platformAction","action","parser","view","tabView","_a","_b","id","fileName","fileType","fileContent","downloadName","files","message","type","ListViewItem","Parser"],"mappings":"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"}