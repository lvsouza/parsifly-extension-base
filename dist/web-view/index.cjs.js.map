{"version":3,"file":"index.cjs.js","sources":["../../src/web-view/index.ts"],"sourcesContent":["import * as ComLink from 'comlink';\n\n\ntype TDragEventMonitor = {\n  x: number;\n  y: number;\n  droppableId: string;\n  draggingId: string | undefined;\n}\n\ntype TStudioApi = {\n  /** Allows you to send a message to your extension host */\n  send: ComLink.Remote<(...data: any[]) => Promise<any>>;\n  /** Allows you to subscribe to receive a message from your extension host */\n  subscribeToMessage(fn: (...params: any[]) => Promise<void>): () => void;\n  /** Allows you to subscribe to receive drag events from studio */\n  subscribeToDragEvent(fn: (type: 'dragover' | 'dragleave' | 'drop', data: any, monitor: TDragEventMonitor) => Promise<void>): () => void;\n}\n\n/**\n * Allows you to send and subscribe to receive message from your extension host\n */\nexport const acquireStudioApi = (): TStudioApi => {\n  if ((window as any).studioApi) return (window as any).studioApi as TStudioApi;\n\n  const dragEventListeners = new Set<((...params: any[]) => Promise<void>)>();\n  const listeners = new Set<((...params: any[]) => Promise<void>)>();\n  const channel = new MessageChannel();\n\n\n  const apiAtIframe = {\n    async send(...data: any[]): Promise<any> {\n      const promises: Promise<any>[] = [];\n\n      for (const listener of listeners) {\n        promises.push(listener(...data));\n      }\n\n      await Promise.all(promises);\n    },\n    async sendDragEvent(...data: any[]): Promise<any> {\n      const promises: Promise<any>[] = [];\n\n      for (const listener of dragEventListeners) {\n        promises.push(listener(...data));\n      }\n\n      await Promise.all(promises);\n    }\n  };\n\n  ComLink.expose(apiAtIframe, channel.port1);\n  window.parent.postMessage({ type: 'connect' }, '*', [channel.port2]);\n\n\n  const apiStudio = ComLink.wrap<typeof apiAtIframe>(channel.port1);\n\n  (window as any).studioApi = {\n    send: apiStudio.send,\n    subscribeToMessage(fn: (...params: any[]) => Promise<void>): () => void {\n      listeners.add(fn);\n      return () => listeners.delete(fn);\n    },\n    subscribeToDragEvent(fn: (...params: any[]) => Promise<void>): () => void {\n      dragEventListeners.add(fn);\n      return () => dragEventListeners.delete(fn);\n    },\n  };\n\n  return (window as any).studioApi;\n}\n"],"names":["acquireStudioApi","dragEventListeners","listeners","channel","apiAtIframe","data","promises","listener","ComLink.expose","apiStudio","ComLink.wrap","fn"],"mappings":"0HAsBaA,EAAmB,IAAkB,CAC3C,GAAA,OAAe,UAAW,OAAQ,OAAe,UAEhD,MAAAC,MAAyB,IACzBC,MAAgB,IAChBC,EAAU,IAAI,eAGdC,EAAc,CAClB,MAAM,QAAQC,EAA2B,CACvC,MAAMC,EAA2B,CAAC,EAElC,UAAWC,KAAYL,EACrBI,EAAS,KAAKC,EAAS,GAAGF,CAAI,CAAC,EAG3B,MAAA,QAAQ,IAAIC,CAAQ,CAC5B,EACA,MAAM,iBAAiBD,EAA2B,CAChD,MAAMC,EAA2B,CAAC,EAElC,UAAWC,KAAYN,EACrBK,EAAS,KAAKC,EAAS,GAAGF,CAAI,CAAC,EAG3B,MAAA,QAAQ,IAAIC,CAAQ,CAAA,CAE9B,EAEQE,SAAOJ,EAAaD,EAAQ,KAAK,EAClC,OAAA,OAAO,YAAY,CAAE,KAAM,WAAa,IAAK,CAACA,EAAQ,KAAK,CAAC,EAGnE,MAAMM,EAAYC,EAAAA,KAAiCP,EAAQ,KAAK,EAE/D,cAAe,UAAY,CAC1B,KAAMM,EAAU,KAChB,mBAAmBE,EAAqD,CACtE,OAAAT,EAAU,IAAIS,CAAE,EACT,IAAMT,EAAU,OAAOS,CAAE,CAClC,EACA,qBAAqBA,EAAqD,CACxE,OAAAV,EAAmB,IAAIU,CAAE,EAClB,IAAMV,EAAmB,OAAOU,CAAE,CAAA,CAE7C,EAEQ,OAAe,SACzB"}