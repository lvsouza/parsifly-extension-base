{"version":3,"file":"index.es.js","sources":["../../src/web-view/index.ts"],"sourcesContent":["import * as ComLink from 'comlink';\n\n\ntype TDragEventMonitor = {\n  x: number;\n  y: number;\n  droppableId: string;\n  draggingId: string | undefined;\n}\n\ntype TStudioApi = {\n  /** Allows you to send a message to your extension host */\n  send: ComLink.Remote<(...data: any[]) => Promise<any>>;\n  /** Allows you to subscribe to receive a message from your extension host */\n  subscribeToMessage(fn: (...params: any[]) => Promise<void>): () => void;\n  /** Allows you to subscribe to receive drag events from studio */\n  subscribeToDragEvent(fn: (type: 'dragover' | 'dragleave' | 'drop', data: any, monitor: TDragEventMonitor) => Promise<void>): () => void;\n}\n\n/**\n * Allows you to send and subscribe to receive message from your extension host\n */\nexport const acquireStudioApi = (): TStudioApi => {\n  if ((window as any).studioApi) return (window as any).studioApi as TStudioApi;\n\n  const dragEventListeners = new Set<((...params: any[]) => Promise<void>)>();\n  const listeners = new Set<((...params: any[]) => Promise<void>)>();\n  const channel = new MessageChannel();\n\n\n  const apiAtIframe = {\n    async send(...data: any[]): Promise<any> {\n      const promises: Promise<any>[] = [];\n\n      for (const listener of listeners) {\n        promises.push(listener(...data));\n      }\n\n      await Promise.all(promises);\n    },\n    async sendDragEvent(...data: any[]): Promise<any> {\n      const promises: Promise<any>[] = [];\n\n      for (const listener of dragEventListeners) {\n        promises.push(listener(...data));\n      }\n\n      await Promise.all(promises);\n    }\n  };\n\n  ComLink.expose(apiAtIframe, channel.port1);\n  window.parent.postMessage({ type: 'connect' }, '*', [channel.port2]);\n\n\n  const apiStudio = ComLink.wrap<typeof apiAtIframe>(channel.port1);\n\n  (window as any).studioApi = {\n    send: apiStudio.send,\n    subscribeToMessage(fn: (...params: any[]) => Promise<void>): () => void {\n      listeners.add(fn);\n      return () => listeners.delete(fn);\n    },\n    subscribeToDragEvent(fn: (...params: any[]) => Promise<void>): () => void {\n      dragEventListeners.add(fn);\n      return () => dragEventListeners.delete(fn);\n    },\n  };\n\n  return (window as any).studioApi;\n}\n"],"names":["acquireStudioApi","dragEventListeners","listeners","channel","ComLink.expose","data","promises","listener","apiStudio","ComLink.wrap","fn"],"mappings":";AAsBO,MAAMA,IAAmB,MAAkB;AAC3C,MAAA,OAAe,UAAW,QAAQ,OAAe;AAEhD,QAAAC,wBAAyB,IAA2C,GACpEC,wBAAgB,IAA2C,GAC3DC,IAAU,IAAI,eAAe;AAwB3BC,EAAAA,EArBY;AAAA,IAClB,MAAM,QAAQC,GAA2B;AACvC,YAAMC,IAA2B,CAAC;AAElC,iBAAWC,KAAYL;AACrB,QAAAI,EAAS,KAAKC,EAAS,GAAGF,CAAI,CAAC;AAG3B,YAAA,QAAQ,IAAIC,CAAQ;AAAA,IAC5B;AAAA,IACA,MAAM,iBAAiBD,GAA2B;AAChD,YAAMC,IAA2B,CAAC;AAElC,iBAAWC,KAAYN;AACrB,QAAAK,EAAS,KAAKC,EAAS,GAAGF,CAAI,CAAC;AAG3B,YAAA,QAAQ,IAAIC,CAAQ;AAAA,IAAA;AAAA,EAE9B,GAE4BH,EAAQ,KAAK,GAClC,OAAA,OAAO,YAAY,EAAE,MAAM,aAAa,KAAK,CAACA,EAAQ,KAAK,CAAC;AAGnE,QAAMK,IAAYC,EAAiCN,EAAQ,KAAK;AAE/D,gBAAe,YAAY;AAAA,IAC1B,MAAMK,EAAU;AAAA,IAChB,mBAAmBE,GAAqD;AACtE,aAAAR,EAAU,IAAIQ,CAAE,GACT,MAAMR,EAAU,OAAOQ,CAAE;AAAA,IAClC;AAAA,IACA,qBAAqBA,GAAqD;AACxE,aAAAT,EAAmB,IAAIS,CAAE,GAClB,MAAMT,EAAmB,OAAOS,CAAE;AAAA,IAAA;AAAA,EAE7C,GAEQ,OAAe;AACzB;"}