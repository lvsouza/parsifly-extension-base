{"version":3,"file":"index.es.js","sources":["../src/lib/shared/components/PlatformActions.ts","../src/lib/shared/providers/ListProvider.ts","../src/lib/shared/components/TabsView.ts","../src/lib/shared/components/TabView.ts","../src/lib/shared/components/Action.ts","../src/lib/shared/components/Editor.ts","../src/lib/shared/components/View.ts","../src/lib/Envs.ts","../src/lib/shared/services/EventLink.ts","../src/lib/data-providers/index.ts","../src/lib/ExtensionBase.ts","../src/lib/shared/components/ListViewItem.ts","../src/lib/shared/components/Parser.ts"],"sourcesContent":["type TBaseAction = {\n  key: string;\n};\n\ntype TSingleAction = {\n  action(): Promise<void>;\n};\n\ntype TMultiAction = {\n  actions: (TBaseAction & TSingleAction)[];\n};\n\nexport type TPlatformAction = TBaseAction & (TSingleAction | TMultiAction);\n\nexport class PlatformAction {\n  key: TPlatformAction['key'];\n  action?: TSingleAction['action'];\n  actions?: TMultiAction['actions'];\n\n  constructor(props: TPlatformAction) {\n    this.key = props.key;\n\n    if ('action' in props) {\n      this.action = props.action;\n    }\n\n    if ('actions' in props) {\n      this.actions = props.actions;\n    }\n  }\n\n  isSingle(): this is TBaseAction & TSingleAction {\n    return typeof this.action === 'function';\n  }\n\n  isMulti(): this is TBaseAction & TMultiAction {\n    return Array.isArray(this.actions);\n  }\n}\n","import { ListViewItem } from '../components/ListViewItem';\n\n\ninterface IListProviderProps {\n  key: string;\n  onItemClick?: (item: ListViewItem) => Promise<void>;\n  onItemDoubleClick?: (item: ListViewItem) => Promise<void>;\n  getItems: (item?: ListViewItem) => Promise<ListViewItem[]>;\n}\nexport class ListProvider {\n  public readonly key: IListProviderProps['key'];\n  public readonly getItems: IListProviderProps['getItems'];\n  public readonly onItemClick: IListProviderProps['onItemClick'];\n  public readonly onItemDoubleClick: IListProviderProps['onItemDoubleClick'];\n\n  constructor(props: IListProviderProps) {\n    this.key = props.key;\n    this.getItems = props.getItems;\n    this.onItemClick = props.onItemClick;\n    this.onItemDoubleClick = props.onItemDoubleClick;\n  }\n}\n","import { TabView } from './TabView';\nimport { Action } from './Action';\n\n\ninterface ITabsViewProps {\n  key: string;\n  tabs: TabView[];\n  actions?: Action[];\n}\nexport class TabsView {\n  public readonly key: ITabsViewProps['key'];\n  public readonly tabs: ITabsViewProps['tabs'];\n  public readonly actions: ITabsViewProps['actions'];\n\n  constructor(props: ITabsViewProps) {\n    this.key = props.key;\n    this.tabs = props.tabs;\n    this.actions = props.actions;\n  }\n}\n","import { ListProvider } from '../providers/ListProvider';\n\n\ninterface ITabViewProps {\n  key: string;\n  dataProvider: ListProvider;\n}\nexport class TabView {\n  public readonly key: ITabViewProps['key'];\n  public readonly dataProvider: ITabViewProps['dataProvider'];\n\n  constructor(props: ITabViewProps) {\n    this.key = props.key;\n    this.dataProvider = props.dataProvider;\n  }\n}\n","\ninterface IActionProps {\n  key: string;\n  action(): Promise<void>;\n}\nexport class Action {\n  public readonly key: IActionProps['key'];\n  public readonly action: IActionProps['action'];\n\n  constructor(props: IActionProps) {\n    this.key = props.key;\n    this.action = props.action;\n  }\n}\n","import { Action } from './Action';\n\n\ninterface IEditorProps {\n  key: string;\n  actions?: Action[];\n  onDidReceiveMessage?: (...values: unknown[]) => Promise<void>;\n}\nexport class Editor {\n  private readonly _messageSenderListeners = new Map<string, ((...values: unknown[]) => Promise<unknown>)>();\n\n\n  public readonly key: IEditorProps['key'];\n  public readonly actions: IEditorProps['actions'];\n  public readonly onDidReceiveMessage: IEditorProps['onDidReceiveMessage'];\n\n\n  public readonly webView = {\n    sendMessage: async (...values: unknown[]) => {\n      this._messageSenderListeners.forEach(listener => listener(...values));\n    },\n  } as const\n\n  constructor(props: IEditorProps) {\n    this.key = props.key;\n    this.actions = props.actions;\n    this.onDidReceiveMessage = props.onDidReceiveMessage;\n  }\n\n\n  public __internal_subscribeToSend(key: string, fn: ((...values: unknown[]) => Promise<unknown>)) {\n    this._messageSenderListeners.set(key, fn);\n  }\n  public __internal_removeSubscribeToSend(key: string) {\n    this._messageSenderListeners.delete(key);\n  }\n}\n","import { ListProvider } from '../providers/ListProvider';\nimport { Action } from './Action';\n\n\ninterface IViewProps {\n  key: string;\n  actions?: Action[];\n  dataProvider: ListProvider;\n}\nexport class View {\n  public readonly key: IViewProps['key'];\n  public readonly actions: IViewProps['actions'];\n  public readonly dataProvider: IViewProps['dataProvider'];\n\n  constructor(props: IViewProps) {\n    this.key = props.key;\n    this.actions = props.actions;\n    this.dataProvider = props.dataProvider;\n  }\n}\n","\n\nexport const Envs = {\n  DEBUG: false,\n};\n","import * as ComLink from 'comlink';\n\nimport { Envs } from '../../Envs';\n\n\ntype TEvent<GParams = unknown, GReturn = unknown> = (...params: GParams[]) => Promise<GReturn>;\n\nexport class EventLink {\n  private _events: Map<string, TEvent<any, any>> = new Map();\n  private _studioWrapper: Record<'callEvent', (...args: unknown[]) => Promise<unknown>>;\n\n\n  constructor() {\n    ComLink.expose({ callEvent: this._callExtensionEvent.bind(this) });\n\n    this._studioWrapper = ComLink.wrap(self as any);\n  }\n\n\n  public setExtensionEvent<GParams = unknown, GReturn = unknown>(key: string, event: TEvent<GParams, GReturn>) {\n    this._events.set(key, event);\n  }\n  public removeExtensionEvent(key: string) {\n    this._events.delete(key);\n  }\n\n  public async callStudioEvent<GParams = unknown, GReturn = unknown>(key: string, ...params: GParams[]): Promise<GReturn> {\n    return this._studioWrapper.callEvent(key, ...params) as Promise<GReturn>;\n  }\n\n\n  private async _callExtensionEvent<GParams = unknown, GReturn = unknown>(key: string, ...params: GParams[]): Promise<GReturn> {\n    const event = this._events.get(key);\n\n    if (Envs.DEBUG) {\n      console.log(this._events.keys());\n    }\n\n    if (!event) {\n      throw new Error(`[EXTENSION] Event with key \"${key}\" was not found.`);\n    }\n\n    return event(...params);\n  }\n}\n","import { EventLink } from '../shared/services/EventLink';\nimport { IComponent } from './interfaces/IComponent';\nimport { IProject } from './interfaces/IProject';\nimport { IService } from './interfaces/IService';\nimport { IPage } from './interfaces/IPage';\n\n\n\nexport const createDataProviders = (eventLink: EventLink) => {\n  return {\n    /**\n     * Allow you to call a custom command from application\n     * \n     * @param key Name of the command\n     * @param args List of arguments to be forwarded to the command call\n     */\n    callCustomDataProvider: async <GParam = unknown, GReturn = unknown>(key: string, ...args: GParam[]): Promise<GReturn> => {\n      return await eventLink.callStudioEvent(key, ...args);\n    },\n    /**\n     * Allow you to get the entire project object or get parts with ...project.pages(), .services(), .components() and more.\n     */\n    project: Object.assign(\n      async (): Promise<IProject<'application' | 'package'>> => {\n        return await eventLink.callStudioEvent<void, IProject<'application' | 'package'>>('project:get');\n      },\n      {\n        set: async (project: IProject<'application' | 'package'>): Promise<void> => {\n          return await eventLink.callStudioEvent<IProject<'application' | 'package'>, void>('project:set', project);\n        },\n\n        pages: Object.assign(\n          async (): Promise<IPage[]> => {\n            return await eventLink.callStudioEvent<void, IPage[]>('project.pages:get');\n          },\n          async (index: number): Promise<IPage> => {\n            return await eventLink.callStudioEvent<number, IPage>('project.pages:get', index);\n          },\n          {\n            set: async (page: IPage, index: number): Promise<void> => {\n              return await eventLink.callStudioEvent<IPage | number, void>('project.pages:set', page, index);\n            },\n            add: Object.assign(\n              async (page: IPage): Promise<void> => {\n                return await eventLink.callStudioEvent<IPage, void>('project.pages:add', page);\n              },\n              async (page: IPage, index: number): Promise<void> => {\n                return await eventLink.callStudioEvent<IPage | number, void>('project.pages:add', page, index);\n              },\n            ),\n            del: Object.assign(\n              async (): Promise<void> => {\n                return await eventLink.callStudioEvent<void, void>('project.pages:del');\n              },\n              async (index: number): Promise<void> => {\n                return await eventLink.callStudioEvent<number, void>('project.pages:del', index);\n              },\n            )\n          }\n        ),\n        components: Object.assign(\n          async (): Promise<IComponent[]> => {\n            return await eventLink.callStudioEvent<void, IComponent[]>('project.components:get');\n          },\n          async (index: number): Promise<IComponent> => {\n            return await eventLink.callStudioEvent<number, IComponent>('project.components:get', index);\n          },\n          {\n            set: async (component: IComponent, index: number): Promise<void> => {\n              return await eventLink.callStudioEvent<IComponent | number, void>('project.components:set', component, index);\n            },\n            add: Object.assign(\n              async (component: IComponent): Promise<void> => {\n                return await eventLink.callStudioEvent<IComponent, void>('project.components:add', component);\n              },\n              async (component: IComponent, index: number): Promise<void> => {\n                return await eventLink.callStudioEvent<IComponent | number, void>('project.components:add', component, index);\n              },\n            ),\n            del: Object.assign(\n              async (): Promise<void> => {\n                return await eventLink.callStudioEvent<void, void>('project.components:del');\n              },\n              async (index: number): Promise<void> => {\n                return await eventLink.callStudioEvent<number, void>('project.components:del', index);\n              },\n            )\n          }\n        ),\n        services: Object.assign(\n          async (): Promise<IService[]> => {\n            return await eventLink.callStudioEvent<void, IService[]>('project.services:get');\n          },\n          async (index: number): Promise<IService> => {\n            return await eventLink.callStudioEvent<number, IService>('project.services:get', index);\n          },\n          {\n            set: async (service: IService, index: number): Promise<void> => {\n              return await eventLink.callStudioEvent<IService | number, void>('project.services:set', service, index);\n            },\n            add: Object.assign(\n              async (service: IService): Promise<void> => {\n                return await eventLink.callStudioEvent<IService, void>('project.services:add', service);\n              },\n              async (service: IService, index: number): Promise<void> => {\n                return await eventLink.callStudioEvent<IService | number, void>('project.services:add', service, index);\n              },\n            ),\n            del: Object.assign(\n              async (): Promise<void> => {\n                return await eventLink.callStudioEvent<void, void>('project.services:del');\n              },\n              async (index: number): Promise<void> => {\n                return await eventLink.callStudioEvent<number, void>('project.services:del', index);\n              },\n            )\n          }\n        ),\n      }\n    ),\n  } as const;\n}\n","import { PlatformAction } from './shared/components/PlatformActions';\r\nimport { TabsView } from './shared/components/TabsView';\r\nimport { EventLink } from './shared/services/EventLink';\r\nimport { createDataProviders } from './data-providers';\r\nimport { TFileOrFolder } from './types/TFileOrFolder';\r\nimport { Parser } from './shared/components/Parser';\r\nimport { Editor } from './shared/components/Editor';\r\nimport { TQuickPick } from './types/TQuickPick';\r\nimport { View } from './shared/components/View';\r\n\r\n\r\nexport abstract class ExtensionBase {\r\n  private _eventLink: EventLink = new EventLink();\r\n\r\n\r\n  constructor() {\r\n    this._eventLink.setExtensionEvent('activate', this.activate.bind(this));\r\n    this._eventLink.setExtensionEvent('deactivate', this.deactivate.bind(this));\r\n  }\r\n\r\n\r\n  /**\r\n   * Automatically called when the extension start.\r\n   */\r\n  async activate(): Promise<void> {\r\n    console.log('Extension activated (base implementation).');\r\n  }\r\n\r\n  /**\r\n   * Automatically called when the extension stop.\r\n   */\r\n  async deactivate(): Promise<void> {\r\n    console.log('Extension deactivated (base implementation).');\r\n  }\r\n\r\n  public readonly application = {\r\n    platformActions: {\r\n      register: (platformAction: PlatformAction) => {\r\n        if (platformAction.action) {\r\n          this._eventLink.setExtensionEvent(`platformActions:${platformAction.key}`, platformAction.action);\r\n        } else if (platformAction.actions) {\r\n          platformAction.actions.forEach(action => {\r\n            this._eventLink.setExtensionEvent(`platformActions:${platformAction.key}:actions:${action.key}`, action.action);\r\n          });\r\n        }\r\n      },\r\n      unregister: (platformAction: PlatformAction) => {\r\n        if (platformAction.action) {\r\n          this._eventLink.removeExtensionEvent(`platformActions:${platformAction.key}`);\r\n        } else if (platformAction.actions) {\r\n          platformAction.actions.forEach(action => {\r\n            this._eventLink.removeExtensionEvent(`platformActions:${platformAction.key}:actions:${action.key}`);\r\n          });\r\n        }\r\n      },\r\n    },\r\n    parsers: {\r\n      register: (parser: Parser) => {\r\n        this._eventLink.setExtensionEvent(`parsers:${parser.key}`, parser.parser);\r\n      },\r\n      unregister: (parser: Parser) => {\r\n        this._eventLink.removeExtensionEvent(`parsers:${parser.key}`);\r\n      },\r\n    },\r\n    views: {\r\n      refresh: async (view: View | TabsView) => {\r\n        await this._eventLink.callStudioEvent(`views:${view.key}:refresh`);\r\n      },\r\n      register: (view: View | TabsView) => {\r\n        if (view instanceof TabsView) {\r\n          view.tabs.forEach(tabView => {\r\n            this._eventLink.setExtensionEvent(`views:${view.key}:tabsView:${tabView.key}:loadItems:${tabView.dataProvider.key}`, tabView.dataProvider.getItems);\r\n            if (tabView.dataProvider.onItemClick) this._eventLink.setExtensionEvent(`views:${view.key}:tabsView:${tabView.key}:onItemClick:${tabView.dataProvider.key}`, tabView.dataProvider.onItemClick);\r\n            if (tabView.dataProvider.onItemDoubleClick) this._eventLink.setExtensionEvent(`views:${view.key}:tabsView:${tabView.key}:onItemDoubleClick:${tabView.dataProvider.key}`, tabView.dataProvider.onItemDoubleClick);\r\n          })\r\n          view.actions?.forEach(action => {\r\n            this._eventLink.setExtensionEvent(`views:${view.key}:actions:${action.key}`, action.action);\r\n          });\r\n        } else {\r\n          this._eventLink.setExtensionEvent(`views:${view.key}:loadItems:${view.dataProvider.key}`, view.dataProvider.getItems);\r\n          if (view.dataProvider.onItemClick) this._eventLink.setExtensionEvent(`views:${view.key}:onItemClick:${view.dataProvider.key}`, view.dataProvider.onItemClick);\r\n          if (view.dataProvider.onItemDoubleClick) this._eventLink.setExtensionEvent(`views:${view.key}:onItemDoubleClick:${view.dataProvider.key}`, view.dataProvider.onItemDoubleClick);\r\n          view.actions?.forEach(action => {\r\n            this._eventLink.setExtensionEvent(`views:${view.key}:actions:${action.key}`, action.action);\r\n          });\r\n        }\r\n      },\r\n      unregister: (view: View | TabsView) => {\r\n        if (view instanceof TabsView) {\r\n          view.tabs.forEach(tabView => {\r\n            this._eventLink.removeExtensionEvent(`views:${view.key}:tabsView:${tabView.key}:loadItems:${tabView.dataProvider.key}`);\r\n            if (tabView.dataProvider.onItemClick) this._eventLink.removeExtensionEvent(`views:${view.key}:tabsView:${tabView.key}:onItemClick:${tabView.dataProvider.key}`);\r\n            if (tabView.dataProvider.onItemDoubleClick) this._eventLink.removeExtensionEvent(`views:${view.key}:tabsView:${tabView.key}:onItemDoubleClick:${tabView.dataProvider.key}`);\r\n          })\r\n          view.actions?.forEach(action => {\r\n            this._eventLink.removeExtensionEvent(`views:${view.key}:actions:${action.key}`);\r\n          });\r\n        } else {\r\n          this._eventLink.removeExtensionEvent(`views:${view.key}:loadItems:${view.dataProvider.key}`);\r\n          if (view.dataProvider.onItemClick) this._eventLink.removeExtensionEvent(`views:${view.key}:onItemClick:${view.dataProvider.key}`);\r\n          if (view.dataProvider.onItemDoubleClick) this._eventLink.removeExtensionEvent(`views:${view.key}:onItemDoubleClick:${view.dataProvider.key}`);\r\n          view.actions?.forEach(action => {\r\n            this._eventLink.removeExtensionEvent(`views:${view.key}:actions:${action.key}`);\r\n          });\r\n        }\r\n      },\r\n    },\r\n    editors: {\r\n      /**\r\n       * Allow you to open a item in a editor based on the item type\r\n       * \r\n       * @param key Identifier of a item to be opened for some editor\r\n       */\r\n      open: async (key: string) => {\r\n        await this._eventLink.callStudioEvent(`editors:open`, key);\r\n      },\r\n      register: (view: Editor) => {\r\n        this._eventLink.setExtensionEvent(`editors:${view.key}:forwardEvents:receive`, async (...values) => view.onDidReceiveMessage?.(...values));\r\n\r\n        view.__internal_subscribeToSend(`editors:${view.key}:forwardEvents:send`, async (...values) => {\r\n          return await this._eventLink.callStudioEvent(`editors:${view.key}:forwardEvents:send`, ...values);\r\n        });\r\n\r\n        view.actions?.forEach(action => {\r\n          this._eventLink.setExtensionEvent(`editors:${view.key}:actions:${action.key}`, action.action);\r\n        });\r\n      },\r\n      unregister: (view: Editor) => {\r\n        this._eventLink.removeExtensionEvent(`editors:${view.key}:forwardEvents:receive`);\r\n\r\n        view.__internal_removeSubscribeToSend(`editors:${view.key}:forwardEvents:send`);\r\n\r\n        view.actions?.forEach(action => {\r\n          this._eventLink.removeExtensionEvent(`editors:${view.key}:actions:${action.key}`);\r\n        });\r\n      },\r\n    },\r\n    commands: {\r\n      /**\r\n       * Allow you to call a custom command from application\r\n       * \r\n       * @param key Name of the command\r\n       * @param args List of arguments to be forwarded to the command call\r\n       */\r\n      callCustomCommand: async <GParam = unknown, GReturn = unknown>(key: string, ...args: GParam[]): Promise<GReturn> => {\r\n        return await this._eventLink.callStudioEvent(key, ...args);\r\n      },\r\n      /**\r\n       * Allow you to download some content in a file\r\n       * \r\n       * @param fileName Name of the generated file\r\n       * @param fileType extension of the file\r\n       * @param fileContent file content in string\r\n       */\r\n      downloadFile: async (fileName: string, fileType: string, fileContent: string): Promise<void> => {\r\n        return await this._eventLink.callStudioEvent<string, void>('download:file', fileName, fileType, fileContent);\r\n      },\r\n      /**\r\n       * Allow you to download a lot of files and folders as zip\r\n       * \r\n       * @param downloadName Name of the download as zip\r\n       * @param files List of files or folders to download\r\n       */\r\n      downloadFiles: async (downloadName: string, files: TFileOrFolder[]): Promise<void> => {\r\n        return await this._eventLink.callStudioEvent<string | TFileOrFolder[], void>('download:files', downloadName, files);\r\n      },\r\n      /**\r\n       * Grouped methods to editor configuration\r\n       */\r\n      editor: {\r\n        /**\r\n         * Allow to show some feedback to the platform user\r\n         * \r\n         * @param message Message of the feedback\r\n         * @param type type of the feedback\r\n         */\r\n        feedback: async (message: string, type: \"warning\" | \"success\" | \"error\" | \"info\"): Promise<void> => {\r\n          return await this._eventLink.callStudioEvent<string, void>('editor:feedback', message, type);\r\n        },\r\n        /**\r\n         * Allow to capture user freeform text input\r\n         * \r\n         * @param props Props to configure the quick pick\r\n         */\r\n        showQuickPick: async (props: TQuickPick): Promise<string | void> => {\r\n          return await this._eventLink.callStudioEvent<TQuickPick, string | void>('editor:quickPick:show', props);\r\n        },\r\n        /**\r\n         * Allow to set primary side bar view by key\r\n         * \r\n         * @param key Key to identify the view to show in the side bar\r\n         */\r\n        showPrimarySideBarByKey: async (key: string): Promise<void> => {\r\n          return await this._eventLink.callStudioEvent<string, void>('editor:primarySideBar:showByKey', key);\r\n        },\r\n        /**\r\n         * Allow to set secondary side bar view by key\r\n         * \r\n         * @param key Key to identify the view to show in the side bar\r\n         */\r\n        showSecondarySideBarByKey: async (key: string): Promise<void> => {\r\n          return await this._eventLink.callStudioEvent<string, void>('editor:secondarySideBar:showByKey', key);\r\n        },\r\n      }\r\n    },\r\n    dataProviders: createDataProviders(this._eventLink),\r\n  } as const;\r\n}\r\n","\ntype TListItemBase = {\n  /** Identifier */\n  key: string;\n  /** VS Code icons */\n  icon?: string;\n  /** Show additional information in bold */\n  extra?: string;\n  /** Details of the record */\n  description?: string;\n}\n\ntype TListItemWithTitle = {\n  label?: undefined;\n  children?: false | undefined;\n  /** Title, main information for the record  */\n  title: string;\n}\n\ntype TListItemWithLabel = {\n  /** Label, main information for the record  */\n  label: string;\n  title?: undefined;\n  /** Define if a item can have a children list */\n  children: boolean;\n}\n\nexport type TListViewItem = (TListItemWithLabel | TListItemWithTitle) & TListItemBase;\n\nexport class ListViewItem {\n  public readonly key: TListItemBase['key'];\n  public readonly icon?: TListItemBase['icon'];\n  public readonly extra?: TListItemBase['extra'];\n  public readonly description?: TListItemBase['description'];\n\n  public readonly title?: TListViewItem['title'];\n  public readonly label?: TListViewItem['label'];\n  public readonly children?: TListViewItem['children'];\n\n\n  constructor(props: TListViewItem) {\n    this.key = props.key;\n    this.icon = props.icon;\n    this.extra = props.extra;\n    this.description = props.description;\n\n    if ('title' in props && props.title !== undefined) {\n      this.title = props.title;\n    }\n\n    if ('label' in props && props.label !== undefined) {\n      this.label = props.label;\n    }\n\n    if ('children' in props && props.children !== undefined) {\n      this.children = props.children;\n    }\n\n    if ((this.title && this.label) || (!this.title && !this.label)) {\n      throw new Error(\"ListViewItem must have either a `title` or a `label`, but not both.\");\n    }\n  }\n}\n","import { TFileOrFolder } from '../../types/TFileOrFolder';\n\n\ntype TParserResult = {\n  name: string;\n  content: string | TFileOrFolder;\n}\n\nexport type TParser = {\n  key: string;\n  parser: () => Promise<TParserResult>;\n}\nexport class Parser {\n  public readonly key: TParser['key'];\n  public readonly parser: TParser['parser'];\n\n  constructor(props: TParser) {\n    this.key = props.key;\n    this.parser = props.parser;\n  }\n}\n"],"names":["PlatformAction","props","ListProvider","TabsView","TabView","Action","Editor","values","listener","key","fn","View","Envs","EventLink","ComLink.expose","ComLink.wrap","event","params","createDataProviders","eventLink","args","project","index","page","component","service","ExtensionBase","platformAction","action","parser","view","tabView","_a","_b","fileName","fileType","fileContent","downloadName","files","message","type","ListViewItem","Parser"],"mappings":"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"}