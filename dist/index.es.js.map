{"version":3,"file":"index.es.js","sources":["../src/lib/shared/components/PlatformActions.ts","../src/lib/shared/providers/ListProvider.ts","../src/lib/shared/components/TabsView.ts","../src/lib/shared/components/TabView.ts","../src/lib/shared/components/Action.ts","../src/lib/shared/components/Editor.ts","../src/lib/shared/components/View.ts","../node_modules/comlink/dist/esm/comlink.mjs","../src/lib/Envs.ts","../src/lib/shared/services/EventLink.ts","../src/lib/data-providers/index.ts","../src/lib/ExtensionBase.ts","../src/lib/shared/components/ListViewItem.ts","../src/lib/shared/components/Parser.ts"],"sourcesContent":["type TBaseAction = {\n  key: string;\n};\n\ntype TSingleAction = {\n  action(): Promise<void>;\n};\n\ntype TMultiAction = {\n  actions: (TBaseAction & TSingleAction)[];\n};\n\nexport type TPlatformAction = TBaseAction & (TSingleAction | TMultiAction);\n\nexport class PlatformAction {\n  key: TPlatformAction['key'];\n  action?: TSingleAction['action'];\n  actions?: TMultiAction['actions'];\n\n  constructor(props: TPlatformAction) {\n    this.key = props.key;\n\n    if ('action' in props) {\n      this.action = props.action;\n    }\n\n    if ('actions' in props) {\n      this.actions = props.actions;\n    }\n  }\n\n  isSingle(): this is TBaseAction & TSingleAction {\n    return typeof this.action === 'function';\n  }\n\n  isMulti(): this is TBaseAction & TMultiAction {\n    return Array.isArray(this.actions);\n  }\n}\n","import { ListViewItem } from '../components/ListViewItem';\n\n\ninterface IListProviderProps {\n  key: string;\n  onItemClick?: (item: ListViewItem) => Promise<void>;\n  onItemDoubleClick?: (item: ListViewItem) => Promise<void>;\n  getItems: (item?: ListViewItem) => Promise<ListViewItem[]>;\n}\nexport class ListProvider {\n  public readonly key: IListProviderProps['key'];\n  public readonly getItems: IListProviderProps['getItems'];\n  public readonly onItemClick: IListProviderProps['onItemClick'];\n  public readonly onItemDoubleClick: IListProviderProps['onItemDoubleClick'];\n\n  constructor(props: IListProviderProps) {\n    this.key = props.key;\n    this.getItems = props.getItems;\n    this.onItemClick = props.onItemClick;\n    this.onItemDoubleClick = props.onItemDoubleClick;\n  }\n}\n","import { TabView } from './TabView';\nimport { Action } from './Action';\n\n\ninterface ITabsViewProps {\n  key: string;\n  tabs: TabView[];\n  actions?: Action[];\n}\nexport class TabsView {\n  public readonly key: ITabsViewProps['key'];\n  public readonly tabs: ITabsViewProps['tabs'];\n  public readonly actions: ITabsViewProps['actions'];\n\n  constructor(props: ITabsViewProps) {\n    this.key = props.key;\n    this.tabs = props.tabs;\n    this.actions = props.actions;\n  }\n}\n","import { ListProvider } from '../providers/ListProvider';\n\n\ninterface ITabViewProps {\n  key: string;\n  dataProvider: ListProvider;\n}\nexport class TabView {\n  public readonly key: ITabViewProps['key'];\n  public readonly dataProvider: ITabViewProps['dataProvider'];\n\n  constructor(props: ITabViewProps) {\n    this.key = props.key;\n    this.dataProvider = props.dataProvider;\n  }\n}\n","\ninterface IActionProps {\n  key: string;\n  action(): Promise<void>;\n}\nexport class Action {\n  public readonly key: IActionProps['key'];\n  public readonly action: IActionProps['action'];\n\n  constructor(props: IActionProps) {\n    this.key = props.key;\n    this.action = props.action;\n  }\n}\n","import { Action } from './Action';\n\n\ninterface IEditorProps {\n  key: string;\n  actions?: Action[];\n  onDidReceiveMessage?: (...values: unknown[]) => Promise<void>;\n}\nexport class Editor {\n  private readonly _messageSenderListeners = new Map<string, ((...values: unknown[]) => Promise<unknown>)>();\n\n\n  public readonly key: IEditorProps['key'];\n  public readonly actions: IEditorProps['actions'];\n  public readonly onDidReceiveMessage: IEditorProps['onDidReceiveMessage'];\n\n\n  public readonly webView = {\n    sendMessage: async (...values: unknown[]) => {\n      this._messageSenderListeners.forEach(listener => listener(...values));\n    },\n  } as const\n\n  constructor(props: IEditorProps) {\n    this.key = props.key;\n    this.actions = props.actions;\n    this.onDidReceiveMessage = props.onDidReceiveMessage;\n  }\n\n\n  public __internal_subscribeToSend(key: string, fn: ((...values: unknown[]) => Promise<unknown>)) {\n    this._messageSenderListeners.set(key, fn);\n  }\n  public __internal_removeSubscribeToSend(key: string) {\n    this._messageSenderListeners.delete(key);\n  }\n}\n","import { ListProvider } from '../providers/ListProvider';\nimport { Action } from './Action';\n\n\ninterface IViewProps {\n  key: string;\n  actions?: Action[];\n  dataProvider: ListProvider;\n}\nexport class View {\n  public readonly key: IViewProps['key'];\n  public readonly actions: IViewProps['actions'];\n  public readonly dataProvider: IViewProps['dataProvider'];\n\n  constructor(props: IViewProps) {\n    this.key = props.key;\n    this.actions = props.actions;\n    this.dataProvider = props.dataProvider;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nconst proxyMarker = Symbol(\"Comlink.proxy\");\nconst createEndpoint = Symbol(\"Comlink.endpoint\");\nconst releaseProxy = Symbol(\"Comlink.releaseProxy\");\nconst finalizer = Symbol(\"Comlink.finalizer\");\nconst throwMarker = Symbol(\"Comlink.thrown\");\nconst isObject = (val) => (typeof val === \"object\" && val !== null) || typeof val === \"function\";\n/**\n * Internal transfer handle to handle objects marked to proxy.\n */\nconst proxyTransferHandler = {\n    canHandle: (val) => isObject(val) && val[proxyMarker],\n    serialize(obj) {\n        const { port1, port2 } = new MessageChannel();\n        expose(obj, port1);\n        return [port2, [port2]];\n    },\n    deserialize(port) {\n        port.start();\n        return wrap(port);\n    },\n};\n/**\n * Internal transfer handler to handle thrown exceptions.\n */\nconst throwTransferHandler = {\n    canHandle: (value) => isObject(value) && throwMarker in value,\n    serialize({ value }) {\n        let serialized;\n        if (value instanceof Error) {\n            serialized = {\n                isError: true,\n                value: {\n                    message: value.message,\n                    name: value.name,\n                    stack: value.stack,\n                },\n            };\n        }\n        else {\n            serialized = { isError: false, value };\n        }\n        return [serialized, []];\n    },\n    deserialize(serialized) {\n        if (serialized.isError) {\n            throw Object.assign(new Error(serialized.value.message), serialized.value);\n        }\n        throw serialized.value;\n    },\n};\n/**\n * Allows customizing the serialization of certain values.\n */\nconst transferHandlers = new Map([\n    [\"proxy\", proxyTransferHandler],\n    [\"throw\", throwTransferHandler],\n]);\nfunction isAllowedOrigin(allowedOrigins, origin) {\n    for (const allowedOrigin of allowedOrigins) {\n        if (origin === allowedOrigin || allowedOrigin === \"*\") {\n            return true;\n        }\n        if (allowedOrigin instanceof RegExp && allowedOrigin.test(origin)) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction expose(obj, ep = globalThis, allowedOrigins = [\"*\"]) {\n    ep.addEventListener(\"message\", function callback(ev) {\n        if (!ev || !ev.data) {\n            return;\n        }\n        if (!isAllowedOrigin(allowedOrigins, ev.origin)) {\n            console.warn(`Invalid origin '${ev.origin}' for comlink proxy`);\n            return;\n        }\n        const { id, type, path } = Object.assign({ path: [] }, ev.data);\n        const argumentList = (ev.data.argumentList || []).map(fromWireValue);\n        let returnValue;\n        try {\n            const parent = path.slice(0, -1).reduce((obj, prop) => obj[prop], obj);\n            const rawValue = path.reduce((obj, prop) => obj[prop], obj);\n            switch (type) {\n                case \"GET\" /* MessageType.GET */:\n                    {\n                        returnValue = rawValue;\n                    }\n                    break;\n                case \"SET\" /* MessageType.SET */:\n                    {\n                        parent[path.slice(-1)[0]] = fromWireValue(ev.data.value);\n                        returnValue = true;\n                    }\n                    break;\n                case \"APPLY\" /* MessageType.APPLY */:\n                    {\n                        returnValue = rawValue.apply(parent, argumentList);\n                    }\n                    break;\n                case \"CONSTRUCT\" /* MessageType.CONSTRUCT */:\n                    {\n                        const value = new rawValue(...argumentList);\n                        returnValue = proxy(value);\n                    }\n                    break;\n                case \"ENDPOINT\" /* MessageType.ENDPOINT */:\n                    {\n                        const { port1, port2 } = new MessageChannel();\n                        expose(obj, port2);\n                        returnValue = transfer(port1, [port1]);\n                    }\n                    break;\n                case \"RELEASE\" /* MessageType.RELEASE */:\n                    {\n                        returnValue = undefined;\n                    }\n                    break;\n                default:\n                    return;\n            }\n        }\n        catch (value) {\n            returnValue = { value, [throwMarker]: 0 };\n        }\n        Promise.resolve(returnValue)\n            .catch((value) => {\n            return { value, [throwMarker]: 0 };\n        })\n            .then((returnValue) => {\n            const [wireValue, transferables] = toWireValue(returnValue);\n            ep.postMessage(Object.assign(Object.assign({}, wireValue), { id }), transferables);\n            if (type === \"RELEASE\" /* MessageType.RELEASE */) {\n                // detach and deactive after sending release response above.\n                ep.removeEventListener(\"message\", callback);\n                closeEndPoint(ep);\n                if (finalizer in obj && typeof obj[finalizer] === \"function\") {\n                    obj[finalizer]();\n                }\n            }\n        })\n            .catch((error) => {\n            // Send Serialization Error To Caller\n            const [wireValue, transferables] = toWireValue({\n                value: new TypeError(\"Unserializable return value\"),\n                [throwMarker]: 0,\n            });\n            ep.postMessage(Object.assign(Object.assign({}, wireValue), { id }), transferables);\n        });\n    });\n    if (ep.start) {\n        ep.start();\n    }\n}\nfunction isMessagePort(endpoint) {\n    return endpoint.constructor.name === \"MessagePort\";\n}\nfunction closeEndPoint(endpoint) {\n    if (isMessagePort(endpoint))\n        endpoint.close();\n}\nfunction wrap(ep, target) {\n    const pendingListeners = new Map();\n    ep.addEventListener(\"message\", function handleMessage(ev) {\n        const { data } = ev;\n        if (!data || !data.id) {\n            return;\n        }\n        const resolver = pendingListeners.get(data.id);\n        if (!resolver) {\n            return;\n        }\n        try {\n            resolver(data);\n        }\n        finally {\n            pendingListeners.delete(data.id);\n        }\n    });\n    return createProxy(ep, pendingListeners, [], target);\n}\nfunction throwIfProxyReleased(isReleased) {\n    if (isReleased) {\n        throw new Error(\"Proxy has been released and is not useable\");\n    }\n}\nfunction releaseEndpoint(ep) {\n    return requestResponseMessage(ep, new Map(), {\n        type: \"RELEASE\" /* MessageType.RELEASE */,\n    }).then(() => {\n        closeEndPoint(ep);\n    });\n}\nconst proxyCounter = new WeakMap();\nconst proxyFinalizers = \"FinalizationRegistry\" in globalThis &&\n    new FinalizationRegistry((ep) => {\n        const newCount = (proxyCounter.get(ep) || 0) - 1;\n        proxyCounter.set(ep, newCount);\n        if (newCount === 0) {\n            releaseEndpoint(ep);\n        }\n    });\nfunction registerProxy(proxy, ep) {\n    const newCount = (proxyCounter.get(ep) || 0) + 1;\n    proxyCounter.set(ep, newCount);\n    if (proxyFinalizers) {\n        proxyFinalizers.register(proxy, ep, proxy);\n    }\n}\nfunction unregisterProxy(proxy) {\n    if (proxyFinalizers) {\n        proxyFinalizers.unregister(proxy);\n    }\n}\nfunction createProxy(ep, pendingListeners, path = [], target = function () { }) {\n    let isProxyReleased = false;\n    const proxy = new Proxy(target, {\n        get(_target, prop) {\n            throwIfProxyReleased(isProxyReleased);\n            if (prop === releaseProxy) {\n                return () => {\n                    unregisterProxy(proxy);\n                    releaseEndpoint(ep);\n                    pendingListeners.clear();\n                    isProxyReleased = true;\n                };\n            }\n            if (prop === \"then\") {\n                if (path.length === 0) {\n                    return { then: () => proxy };\n                }\n                const r = requestResponseMessage(ep, pendingListeners, {\n                    type: \"GET\" /* MessageType.GET */,\n                    path: path.map((p) => p.toString()),\n                }).then(fromWireValue);\n                return r.then.bind(r);\n            }\n            return createProxy(ep, pendingListeners, [...path, prop]);\n        },\n        set(_target, prop, rawValue) {\n            throwIfProxyReleased(isProxyReleased);\n            // FIXME: ES6 Proxy Handler `set` methods are supposed to return a\n            // boolean. To show good will, we return true asynchronously ¯\\_(ツ)_/¯\n            const [value, transferables] = toWireValue(rawValue);\n            return requestResponseMessage(ep, pendingListeners, {\n                type: \"SET\" /* MessageType.SET */,\n                path: [...path, prop].map((p) => p.toString()),\n                value,\n            }, transferables).then(fromWireValue);\n        },\n        apply(_target, _thisArg, rawArgumentList) {\n            throwIfProxyReleased(isProxyReleased);\n            const last = path[path.length - 1];\n            if (last === createEndpoint) {\n                return requestResponseMessage(ep, pendingListeners, {\n                    type: \"ENDPOINT\" /* MessageType.ENDPOINT */,\n                }).then(fromWireValue);\n            }\n            // We just pretend that `bind()` didn’t happen.\n            if (last === \"bind\") {\n                return createProxy(ep, pendingListeners, path.slice(0, -1));\n            }\n            const [argumentList, transferables] = processArguments(rawArgumentList);\n            return requestResponseMessage(ep, pendingListeners, {\n                type: \"APPLY\" /* MessageType.APPLY */,\n                path: path.map((p) => p.toString()),\n                argumentList,\n            }, transferables).then(fromWireValue);\n        },\n        construct(_target, rawArgumentList) {\n            throwIfProxyReleased(isProxyReleased);\n            const [argumentList, transferables] = processArguments(rawArgumentList);\n            return requestResponseMessage(ep, pendingListeners, {\n                type: \"CONSTRUCT\" /* MessageType.CONSTRUCT */,\n                path: path.map((p) => p.toString()),\n                argumentList,\n            }, transferables).then(fromWireValue);\n        },\n    });\n    registerProxy(proxy, ep);\n    return proxy;\n}\nfunction myFlat(arr) {\n    return Array.prototype.concat.apply([], arr);\n}\nfunction processArguments(argumentList) {\n    const processed = argumentList.map(toWireValue);\n    return [processed.map((v) => v[0]), myFlat(processed.map((v) => v[1]))];\n}\nconst transferCache = new WeakMap();\nfunction transfer(obj, transfers) {\n    transferCache.set(obj, transfers);\n    return obj;\n}\nfunction proxy(obj) {\n    return Object.assign(obj, { [proxyMarker]: true });\n}\nfunction windowEndpoint(w, context = globalThis, targetOrigin = \"*\") {\n    return {\n        postMessage: (msg, transferables) => w.postMessage(msg, targetOrigin, transferables),\n        addEventListener: context.addEventListener.bind(context),\n        removeEventListener: context.removeEventListener.bind(context),\n    };\n}\nfunction toWireValue(value) {\n    for (const [name, handler] of transferHandlers) {\n        if (handler.canHandle(value)) {\n            const [serializedValue, transferables] = handler.serialize(value);\n            return [\n                {\n                    type: \"HANDLER\" /* WireValueType.HANDLER */,\n                    name,\n                    value: serializedValue,\n                },\n                transferables,\n            ];\n        }\n    }\n    return [\n        {\n            type: \"RAW\" /* WireValueType.RAW */,\n            value,\n        },\n        transferCache.get(value) || [],\n    ];\n}\nfunction fromWireValue(value) {\n    switch (value.type) {\n        case \"HANDLER\" /* WireValueType.HANDLER */:\n            return transferHandlers.get(value.name).deserialize(value.value);\n        case \"RAW\" /* WireValueType.RAW */:\n            return value.value;\n    }\n}\nfunction requestResponseMessage(ep, pendingListeners, msg, transfers) {\n    return new Promise((resolve) => {\n        const id = generateUUID();\n        pendingListeners.set(id, resolve);\n        if (ep.start) {\n            ep.start();\n        }\n        ep.postMessage(Object.assign({ id }, msg), transfers);\n    });\n}\nfunction generateUUID() {\n    return new Array(4)\n        .fill(0)\n        .map(() => Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(16))\n        .join(\"-\");\n}\n\nexport { createEndpoint, expose, finalizer, proxy, proxyMarker, releaseProxy, transfer, transferHandlers, windowEndpoint, wrap };\n//# sourceMappingURL=comlink.mjs.map\n","\n\nexport const Envs = {\n  DEBUG: false,\n};\n","import * as ComLink from 'comlink';\n\nimport { Envs } from '../../Envs';\n\n\ntype TEvent<GParams = unknown, GReturn = unknown> = (...params: GParams[]) => Promise<GReturn>;\n\nexport class EventLink {\n  private _events: Map<string, TEvent<any, any>> = new Map();\n  private _studioWrapper: Record<'callEvent', (...args: unknown[]) => Promise<unknown>>;\n\n\n  constructor() {\n    ComLink.expose({ callEvent: this._callExtensionEvent.bind(this) });\n\n    this._studioWrapper = ComLink.wrap(self as any);\n  }\n\n\n  public setExtensionEvent<GParams = unknown, GReturn = unknown>(key: string, event: TEvent<GParams, GReturn>) {\n    this._events.set(key, event);\n  }\n  public removeExtensionEvent(key: string) {\n    this._events.delete(key);\n  }\n\n  public async callStudioEvent<GParams = unknown, GReturn = unknown>(key: string, ...params: GParams[]): Promise<GReturn> {\n    return this._studioWrapper.callEvent(key, ...params) as Promise<GReturn>;\n  }\n\n\n  private async _callExtensionEvent<GParams = unknown, GReturn = unknown>(key: string, ...params: GParams[]): Promise<GReturn> {\n    const event = this._events.get(key);\n\n    if (Envs.DEBUG) {\n      console.log(this._events.keys());\n    }\n\n    if (!event) {\n      throw new Error(`[EXTENSION] Event with key \"${key}\" was not found.`);\n    }\n\n    return event(...params);\n  }\n}\n","import { EventLink } from '../shared/services/EventLink';\nimport { IComponent } from './interfaces/IComponent';\nimport { IProject } from './interfaces/IProject';\nimport { IService } from './interfaces/IService';\nimport { IPage } from './interfaces/IPage';\n\n\n\nexport const createDataProviders = (eventLink: EventLink) => {\n  return {\n    /**\n     * Allow you to call a custom command from application\n     * \n     * @param key Name of the command\n     * @param args List of arguments to be forwarded to the command call\n     */\n    callCustomDataProvider: async <GParam = unknown, GReturn = unknown>(key: string, ...args: GParam[]): Promise<GReturn> => {\n      return await eventLink.callStudioEvent(key, ...args);\n    },\n    /**\n     * Allow you to get the entire project object or get parts with ...project.pages(), .services(), .components() and more.\n     */\n    project: Object.assign(\n      async (): Promise<IProject<'application' | 'package'>> => {\n        return await eventLink.callStudioEvent<void, IProject<'application' | 'package'>>('project:get');\n      },\n      {\n        set: async (project: IProject<'application' | 'package'>): Promise<void> => {\n          return await eventLink.callStudioEvent<IProject<'application' | 'package'>, void>('project:set', project);\n        },\n\n        pages: Object.assign(\n          async (): Promise<IPage[]> => {\n            return await eventLink.callStudioEvent<void, IPage[]>('project.pages:get');\n          },\n          async (index: number): Promise<IPage> => {\n            return await eventLink.callStudioEvent<number, IPage>('project.pages:get', index);\n          },\n          {\n            set: async (page: IPage, index: number): Promise<void> => {\n              return await eventLink.callStudioEvent<IPage | number, void>('project.pages:set', page, index);\n            },\n            add: Object.assign(\n              async (page: IPage): Promise<void> => {\n                return await eventLink.callStudioEvent<IPage, void>('project.pages:add', page);\n              },\n              async (page: IPage, index: number): Promise<void> => {\n                return await eventLink.callStudioEvent<IPage | number, void>('project.pages:add', page, index);\n              },\n            ),\n            del: Object.assign(\n              async (): Promise<void> => {\n                return await eventLink.callStudioEvent<void, void>('project.pages:del');\n              },\n              async (index: number): Promise<void> => {\n                return await eventLink.callStudioEvent<number, void>('project.pages:del', index);\n              },\n            )\n          }\n        ),\n        components: Object.assign(\n          async (): Promise<IComponent[]> => {\n            return await eventLink.callStudioEvent<void, IComponent[]>('project.components:get');\n          },\n          async (index: number): Promise<IComponent> => {\n            return await eventLink.callStudioEvent<number, IComponent>('project.components:get', index);\n          },\n          {\n            set: async (component: IComponent, index: number): Promise<void> => {\n              return await eventLink.callStudioEvent<IComponent | number, void>('project.components:set', component, index);\n            },\n            add: Object.assign(\n              async (component: IComponent): Promise<void> => {\n                return await eventLink.callStudioEvent<IComponent, void>('project.components:add', component);\n              },\n              async (component: IComponent, index: number): Promise<void> => {\n                return await eventLink.callStudioEvent<IComponent | number, void>('project.components:add', component, index);\n              },\n            ),\n            del: Object.assign(\n              async (): Promise<void> => {\n                return await eventLink.callStudioEvent<void, void>('project.components:del');\n              },\n              async (index: number): Promise<void> => {\n                return await eventLink.callStudioEvent<number, void>('project.components:del', index);\n              },\n            )\n          }\n        ),\n        services: Object.assign(\n          async (): Promise<IService[]> => {\n            return await eventLink.callStudioEvent<void, IService[]>('project.services:get');\n          },\n          async (index: number): Promise<IService> => {\n            return await eventLink.callStudioEvent<number, IService>('project.services:get', index);\n          },\n          {\n            set: async (service: IService, index: number): Promise<void> => {\n              return await eventLink.callStudioEvent<IService | number, void>('project.services:set', service, index);\n            },\n            add: Object.assign(\n              async (service: IService): Promise<void> => {\n                return await eventLink.callStudioEvent<IService, void>('project.services:add', service);\n              },\n              async (service: IService, index: number): Promise<void> => {\n                return await eventLink.callStudioEvent<IService | number, void>('project.services:add', service, index);\n              },\n            ),\n            del: Object.assign(\n              async (): Promise<void> => {\n                return await eventLink.callStudioEvent<void, void>('project.services:del');\n              },\n              async (index: number): Promise<void> => {\n                return await eventLink.callStudioEvent<number, void>('project.services:del', index);\n              },\n            )\n          }\n        ),\n      }\n    ),\n  } as const;\n}\n","import { PlatformAction } from './shared/components/PlatformActions';\r\nimport { TabsView } from './shared/components/TabsView';\r\nimport { EventLink } from './shared/services/EventLink';\r\nimport { createDataProviders } from './data-providers';\r\nimport { TFileOrFolder } from './types/TFileOrFolder';\r\nimport { Parser } from './shared/components/Parser';\r\nimport { Editor } from './shared/components/Editor';\r\nimport { TQuickPick } from './types/TQuickPick';\r\nimport { View } from './shared/components/View';\r\n\r\n\r\nexport abstract class ExtensionBase {\r\n  private _eventLink: EventLink = new EventLink();\r\n\r\n\r\n  constructor() {\r\n    this._eventLink.setExtensionEvent('activate', this.activate.bind(this));\r\n    this._eventLink.setExtensionEvent('deactivate', this.deactivate.bind(this));\r\n  }\r\n\r\n\r\n  /**\r\n   * Automatically called when the extension start.\r\n   */\r\n  async activate(): Promise<void> {\r\n    console.log('Extension activated (base implementation).');\r\n  }\r\n\r\n  /**\r\n   * Automatically called when the extension stop.\r\n   */\r\n  async deactivate(): Promise<void> {\r\n    console.log('Extension deactivated (base implementation).');\r\n  }\r\n\r\n  public readonly application = {\r\n    platformActions: {\r\n      register: (platformAction: PlatformAction) => {\r\n        if (platformAction.action) {\r\n          this._eventLink.setExtensionEvent(`platformActions:${platformAction.key}`, platformAction.action);\r\n        } else if (platformAction.actions) {\r\n          platformAction.actions.forEach(action => {\r\n            this._eventLink.setExtensionEvent(`platformActions:${platformAction.key}:actions:${action.key}`, action.action);\r\n          });\r\n        }\r\n      },\r\n      unregister: (platformAction: PlatformAction) => {\r\n        if (platformAction.action) {\r\n          this._eventLink.removeExtensionEvent(`platformActions:${platformAction.key}`);\r\n        } else if (platformAction.actions) {\r\n          platformAction.actions.forEach(action => {\r\n            this._eventLink.removeExtensionEvent(`platformActions:${platformAction.key}:actions:${action.key}`);\r\n          });\r\n        }\r\n      },\r\n    },\r\n    parsers: {\r\n      register: (parser: Parser) => {\r\n        this._eventLink.setExtensionEvent(`parsers:${parser.key}`, parser.parser);\r\n      },\r\n      unregister: (parser: Parser) => {\r\n        this._eventLink.removeExtensionEvent(`parsers:${parser.key}`);\r\n      },\r\n    },\r\n    views: {\r\n      refresh: async (view: View | TabsView) => {\r\n        await this._eventLink.callStudioEvent(`views:${view.key}:refresh`);\r\n      },\r\n      register: (view: View | TabsView) => {\r\n        if (view instanceof TabsView) {\r\n          view.tabs.forEach(tabView => {\r\n            this._eventLink.setExtensionEvent(`views:${view.key}:tabsView:${tabView.key}:loadItems:${tabView.dataProvider.key}`, tabView.dataProvider.getItems);\r\n            if (tabView.dataProvider.onItemClick) this._eventLink.setExtensionEvent(`views:${view.key}:tabsView:${tabView.key}:onItemClick:${tabView.dataProvider.key}`, tabView.dataProvider.onItemClick);\r\n            if (tabView.dataProvider.onItemDoubleClick) this._eventLink.setExtensionEvent(`views:${view.key}:tabsView:${tabView.key}:onItemDoubleClick:${tabView.dataProvider.key}`, tabView.dataProvider.onItemDoubleClick);\r\n          })\r\n          view.actions?.forEach(action => {\r\n            this._eventLink.setExtensionEvent(`views:${view.key}:actions:${action.key}`, action.action);\r\n          });\r\n        } else {\r\n          this._eventLink.setExtensionEvent(`views:${view.key}:loadItems:${view.dataProvider.key}`, view.dataProvider.getItems);\r\n          if (view.dataProvider.onItemClick) this._eventLink.setExtensionEvent(`views:${view.key}:onItemClick:${view.dataProvider.key}`, view.dataProvider.onItemClick);\r\n          if (view.dataProvider.onItemDoubleClick) this._eventLink.setExtensionEvent(`views:${view.key}:onItemDoubleClick:${view.dataProvider.key}`, view.dataProvider.onItemDoubleClick);\r\n          view.actions?.forEach(action => {\r\n            this._eventLink.setExtensionEvent(`views:${view.key}:actions:${action.key}`, action.action);\r\n          });\r\n        }\r\n      },\r\n      unregister: (view: View | TabsView) => {\r\n        if (view instanceof TabsView) {\r\n          view.tabs.forEach(tabView => {\r\n            this._eventLink.removeExtensionEvent(`views:${view.key}:tabsView:${tabView.key}:loadItems:${tabView.dataProvider.key}`);\r\n            if (tabView.dataProvider.onItemClick) this._eventLink.removeExtensionEvent(`views:${view.key}:tabsView:${tabView.key}:onItemClick:${tabView.dataProvider.key}`);\r\n            if (tabView.dataProvider.onItemDoubleClick) this._eventLink.removeExtensionEvent(`views:${view.key}:tabsView:${tabView.key}:onItemDoubleClick:${tabView.dataProvider.key}`);\r\n          })\r\n          view.actions?.forEach(action => {\r\n            this._eventLink.removeExtensionEvent(`views:${view.key}:actions:${action.key}`);\r\n          });\r\n        } else {\r\n          this._eventLink.removeExtensionEvent(`views:${view.key}:loadItems:${view.dataProvider.key}`);\r\n          if (view.dataProvider.onItemClick) this._eventLink.removeExtensionEvent(`views:${view.key}:onItemClick:${view.dataProvider.key}`);\r\n          if (view.dataProvider.onItemDoubleClick) this._eventLink.removeExtensionEvent(`views:${view.key}:onItemDoubleClick:${view.dataProvider.key}`);\r\n          view.actions?.forEach(action => {\r\n            this._eventLink.removeExtensionEvent(`views:${view.key}:actions:${action.key}`);\r\n          });\r\n        }\r\n      },\r\n    },\r\n    editors: {\r\n      /**\r\n       * Allow you to open a item in a editor based on the item type\r\n       * \r\n       * @param key Identifier of a item to be opened for some editor\r\n       */\r\n      open: async (key: string) => {\r\n        await this._eventLink.callStudioEvent(`editors:open`, key);\r\n      },\r\n      register: (view: Editor) => {\r\n        this._eventLink.setExtensionEvent(`editors:${view.key}:forwardEvents:receive`, async (...values) => view.onDidReceiveMessage?.(...values));\r\n\r\n        view.__internal_subscribeToSend(`editors:${view.key}:forwardEvents:send`, async (...values) => {\r\n          return await this._eventLink.callStudioEvent(`editors:${view.key}:forwardEvents:send`, ...values);\r\n        });\r\n\r\n        view.actions?.forEach(action => {\r\n          this._eventLink.setExtensionEvent(`editors:${view.key}:actions:${action.key}`, action.action);\r\n        });\r\n      },\r\n      unregister: (view: Editor) => {\r\n        this._eventLink.removeExtensionEvent(`editors:${view.key}:forwardEvents:receive`);\r\n\r\n        view.__internal_removeSubscribeToSend(`editors:${view.key}:forwardEvents:send`);\r\n\r\n        view.actions?.forEach(action => {\r\n          this._eventLink.removeExtensionEvent(`editors:${view.key}:actions:${action.key}`);\r\n        });\r\n      },\r\n    },\r\n    commands: {\r\n      /**\r\n       * Allow you to call a custom command from application\r\n       * \r\n       * @param key Name of the command\r\n       * @param args List of arguments to be forwarded to the command call\r\n       */\r\n      callCustomCommand: async <GParam = unknown, GReturn = unknown>(key: string, ...args: GParam[]): Promise<GReturn> => {\r\n        return await this._eventLink.callStudioEvent(key, ...args);\r\n      },\r\n      /**\r\n       * Allow you to download some content in a file\r\n       * \r\n       * @param fileName Name of the generated file\r\n       * @param fileType extension of the file\r\n       * @param fileContent file content in string\r\n       */\r\n      downloadFile: async (fileName: string, fileType: string, fileContent: string): Promise<void> => {\r\n        return await this._eventLink.callStudioEvent<string, void>('download:file', fileName, fileType, fileContent);\r\n      },\r\n      /**\r\n       * Allow you to download a lot of files and folders as zip\r\n       * \r\n       * @param downloadName Name of the download as zip\r\n       * @param files List of files or folders to download\r\n       */\r\n      downloadFiles: async (downloadName: string, files: TFileOrFolder[]): Promise<void> => {\r\n        return await this._eventLink.callStudioEvent<string | TFileOrFolder[], void>('download:files', downloadName, files);\r\n      },\r\n      /**\r\n       * Grouped methods to editor configuration\r\n       */\r\n      editor: {\r\n        /**\r\n         * Allow to show some feedback to the platform user\r\n         * \r\n         * @param message Message of the feedback\r\n         * @param type type of the feedback\r\n         */\r\n        feedback: async (message: string, type: \"warning\" | \"success\" | \"error\" | \"info\"): Promise<void> => {\r\n          return await this._eventLink.callStudioEvent<string, void>('editor:feedback', message, type);\r\n        },\r\n        /**\r\n         * Allow to capture user freeform text input\r\n         * \r\n         * @param props Props to configure the quick pick\r\n         */\r\n        showQuickPick: async (props: TQuickPick): Promise<string | void> => {\r\n          return await this._eventLink.callStudioEvent<TQuickPick, string | void>('editor:quickPick:show', props);\r\n        },\r\n        /**\r\n         * Allow to set primary side bar view by key\r\n         * \r\n         * @param key Key to identify the view to show in the side bar\r\n         */\r\n        showPrimarySideBarByKey: async (key: string): Promise<void> => {\r\n          return await this._eventLink.callStudioEvent<string, void>('editor:primarySideBar:showByKey', key);\r\n        },\r\n        /**\r\n         * Allow to set secondary side bar view by key\r\n         * \r\n         * @param key Key to identify the view to show in the side bar\r\n         */\r\n        showSecondarySideBarByKey: async (key: string): Promise<void> => {\r\n          return await this._eventLink.callStudioEvent<string, void>('editor:secondarySideBar:showByKey', key);\r\n        },\r\n      }\r\n    },\r\n    dataProviders: createDataProviders(this._eventLink),\r\n  } as const;\r\n}\r\n","\ntype TListItemBase = {\n  /** Identifier */\n  key: string;\n  /** VS Code icons */\n  icon?: string;\n  /** Show additional information in bold */\n  extra?: string;\n  /** Details of the record */\n  description?: string;\n}\n\ntype TListItemWithTitle = {\n  label?: undefined;\n  children?: false | undefined;\n  /** Title, main information for the record  */\n  title: string;\n}\n\ntype TListItemWithLabel = {\n  /** Label, main information for the record  */\n  label: string;\n  title?: undefined;\n  /** Define if a item can have a children list */\n  children: boolean;\n}\n\nexport type TListViewItem = (TListItemWithLabel | TListItemWithTitle) & TListItemBase;\n\nexport class ListViewItem {\n  public readonly key: TListItemBase['key'];\n  public readonly icon?: TListItemBase['icon'];\n  public readonly extra?: TListItemBase['extra'];\n  public readonly description?: TListItemBase['description'];\n\n  public readonly title?: TListViewItem['title'];\n  public readonly label?: TListViewItem['label'];\n  public readonly children?: TListViewItem['children'];\n\n\n  constructor(props: TListViewItem) {\n    this.key = props.key;\n    this.icon = props.icon;\n    this.extra = props.extra;\n    this.description = props.description;\n\n    if ('title' in props && props.title !== undefined) {\n      this.title = props.title;\n    }\n\n    if ('label' in props && props.label !== undefined) {\n      this.label = props.label;\n    }\n\n    if ('children' in props && props.children !== undefined) {\n      this.children = props.children;\n    }\n\n    if ((this.title && this.label) || (!this.title && !this.label)) {\n      throw new Error(\"ListViewItem must have either a `title` or a `label`, but not both.\");\n    }\n  }\n}\n","import { TFileOrFolder } from '../../types/TFileOrFolder';\n\n\ntype TParserResult = {\n  name: string;\n  content: string | TFileOrFolder;\n}\n\nexport type TParser = {\n  key: string;\n  parser: () => Promise<TParserResult>;\n}\nexport class Parser {\n  public readonly key: TParser['key'];\n  public readonly parser: TParser['parser'];\n\n  constructor(props: TParser) {\n    this.key = props.key;\n    this.parser = props.parser;\n  }\n}\n"],"names":["PlatformAction","props","ListProvider","TabsView","TabView","Action","Editor","values","listener","key","fn","View","proxyMarker","createEndpoint","releaseProxy","finalizer","throwMarker","isObject","val","proxyTransferHandler","obj","port1","port2","expose","port","wrap","throwTransferHandler","value","serialized","transferHandlers","isAllowedOrigin","allowedOrigins","origin","allowedOrigin","ep","callback","ev","id","type","path","argumentList","fromWireValue","returnValue","parent","prop","rawValue","proxy","transfer","wireValue","transferables","toWireValue","closeEndPoint","error","isMessagePort","endpoint","target","pendingListeners","data","resolver","createProxy","throwIfProxyReleased","isReleased","releaseEndpoint","requestResponseMessage","proxyCounter","proxyFinalizers","newCount","registerProxy","unregisterProxy","isProxyReleased","_target","r","p","_thisArg","rawArgumentList","last","processArguments","myFlat","arr","processed","v","transferCache","transfers","name","handler","serializedValue","msg","resolve","generateUUID","Envs","EventLink","ComLink.expose","ComLink.wrap","event","params","createDataProviders","eventLink","args","project","index","page","component","service","ExtensionBase","platformAction","action","parser","view","_a","_b","tabView","fileName","fileType","fileContent","downloadName","files","message","ListViewItem","Parser"],"mappings":"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","x_google_ignoreList":[7]}