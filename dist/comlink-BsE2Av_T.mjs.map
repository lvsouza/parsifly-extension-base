{"version":3,"file":"comlink-BsE2Av_T.mjs","sources":["../node_modules/comlink/dist/esm/comlink.mjs"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nconst proxyMarker = Symbol(\"Comlink.proxy\");\nconst createEndpoint = Symbol(\"Comlink.endpoint\");\nconst releaseProxy = Symbol(\"Comlink.releaseProxy\");\nconst finalizer = Symbol(\"Comlink.finalizer\");\nconst throwMarker = Symbol(\"Comlink.thrown\");\nconst isObject = (val) => (typeof val === \"object\" && val !== null) || typeof val === \"function\";\n/**\n * Internal transfer handle to handle objects marked to proxy.\n */\nconst proxyTransferHandler = {\n    canHandle: (val) => isObject(val) && val[proxyMarker],\n    serialize(obj) {\n        const { port1, port2 } = new MessageChannel();\n        expose(obj, port1);\n        return [port2, [port2]];\n    },\n    deserialize(port) {\n        port.start();\n        return wrap(port);\n    },\n};\n/**\n * Internal transfer handler to handle thrown exceptions.\n */\nconst throwTransferHandler = {\n    canHandle: (value) => isObject(value) && throwMarker in value,\n    serialize({ value }) {\n        let serialized;\n        if (value instanceof Error) {\n            serialized = {\n                isError: true,\n                value: {\n                    message: value.message,\n                    name: value.name,\n                    stack: value.stack,\n                },\n            };\n        }\n        else {\n            serialized = { isError: false, value };\n        }\n        return [serialized, []];\n    },\n    deserialize(serialized) {\n        if (serialized.isError) {\n            throw Object.assign(new Error(serialized.value.message), serialized.value);\n        }\n        throw serialized.value;\n    },\n};\n/**\n * Allows customizing the serialization of certain values.\n */\nconst transferHandlers = new Map([\n    [\"proxy\", proxyTransferHandler],\n    [\"throw\", throwTransferHandler],\n]);\nfunction isAllowedOrigin(allowedOrigins, origin) {\n    for (const allowedOrigin of allowedOrigins) {\n        if (origin === allowedOrigin || allowedOrigin === \"*\") {\n            return true;\n        }\n        if (allowedOrigin instanceof RegExp && allowedOrigin.test(origin)) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction expose(obj, ep = globalThis, allowedOrigins = [\"*\"]) {\n    ep.addEventListener(\"message\", function callback(ev) {\n        if (!ev || !ev.data) {\n            return;\n        }\n        if (!isAllowedOrigin(allowedOrigins, ev.origin)) {\n            console.warn(`Invalid origin '${ev.origin}' for comlink proxy`);\n            return;\n        }\n        const { id, type, path } = Object.assign({ path: [] }, ev.data);\n        const argumentList = (ev.data.argumentList || []).map(fromWireValue);\n        let returnValue;\n        try {\n            const parent = path.slice(0, -1).reduce((obj, prop) => obj[prop], obj);\n            const rawValue = path.reduce((obj, prop) => obj[prop], obj);\n            switch (type) {\n                case \"GET\" /* MessageType.GET */:\n                    {\n                        returnValue = rawValue;\n                    }\n                    break;\n                case \"SET\" /* MessageType.SET */:\n                    {\n                        parent[path.slice(-1)[0]] = fromWireValue(ev.data.value);\n                        returnValue = true;\n                    }\n                    break;\n                case \"APPLY\" /* MessageType.APPLY */:\n                    {\n                        returnValue = rawValue.apply(parent, argumentList);\n                    }\n                    break;\n                case \"CONSTRUCT\" /* MessageType.CONSTRUCT */:\n                    {\n                        const value = new rawValue(...argumentList);\n                        returnValue = proxy(value);\n                    }\n                    break;\n                case \"ENDPOINT\" /* MessageType.ENDPOINT */:\n                    {\n                        const { port1, port2 } = new MessageChannel();\n                        expose(obj, port2);\n                        returnValue = transfer(port1, [port1]);\n                    }\n                    break;\n                case \"RELEASE\" /* MessageType.RELEASE */:\n                    {\n                        returnValue = undefined;\n                    }\n                    break;\n                default:\n                    return;\n            }\n        }\n        catch (value) {\n            returnValue = { value, [throwMarker]: 0 };\n        }\n        Promise.resolve(returnValue)\n            .catch((value) => {\n            return { value, [throwMarker]: 0 };\n        })\n            .then((returnValue) => {\n            const [wireValue, transferables] = toWireValue(returnValue);\n            ep.postMessage(Object.assign(Object.assign({}, wireValue), { id }), transferables);\n            if (type === \"RELEASE\" /* MessageType.RELEASE */) {\n                // detach and deactive after sending release response above.\n                ep.removeEventListener(\"message\", callback);\n                closeEndPoint(ep);\n                if (finalizer in obj && typeof obj[finalizer] === \"function\") {\n                    obj[finalizer]();\n                }\n            }\n        })\n            .catch((error) => {\n            // Send Serialization Error To Caller\n            const [wireValue, transferables] = toWireValue({\n                value: new TypeError(\"Unserializable return value\"),\n                [throwMarker]: 0,\n            });\n            ep.postMessage(Object.assign(Object.assign({}, wireValue), { id }), transferables);\n        });\n    });\n    if (ep.start) {\n        ep.start();\n    }\n}\nfunction isMessagePort(endpoint) {\n    return endpoint.constructor.name === \"MessagePort\";\n}\nfunction closeEndPoint(endpoint) {\n    if (isMessagePort(endpoint))\n        endpoint.close();\n}\nfunction wrap(ep, target) {\n    const pendingListeners = new Map();\n    ep.addEventListener(\"message\", function handleMessage(ev) {\n        const { data } = ev;\n        if (!data || !data.id) {\n            return;\n        }\n        const resolver = pendingListeners.get(data.id);\n        if (!resolver) {\n            return;\n        }\n        try {\n            resolver(data);\n        }\n        finally {\n            pendingListeners.delete(data.id);\n        }\n    });\n    return createProxy(ep, pendingListeners, [], target);\n}\nfunction throwIfProxyReleased(isReleased) {\n    if (isReleased) {\n        throw new Error(\"Proxy has been released and is not useable\");\n    }\n}\nfunction releaseEndpoint(ep) {\n    return requestResponseMessage(ep, new Map(), {\n        type: \"RELEASE\" /* MessageType.RELEASE */,\n    }).then(() => {\n        closeEndPoint(ep);\n    });\n}\nconst proxyCounter = new WeakMap();\nconst proxyFinalizers = \"FinalizationRegistry\" in globalThis &&\n    new FinalizationRegistry((ep) => {\n        const newCount = (proxyCounter.get(ep) || 0) - 1;\n        proxyCounter.set(ep, newCount);\n        if (newCount === 0) {\n            releaseEndpoint(ep);\n        }\n    });\nfunction registerProxy(proxy, ep) {\n    const newCount = (proxyCounter.get(ep) || 0) + 1;\n    proxyCounter.set(ep, newCount);\n    if (proxyFinalizers) {\n        proxyFinalizers.register(proxy, ep, proxy);\n    }\n}\nfunction unregisterProxy(proxy) {\n    if (proxyFinalizers) {\n        proxyFinalizers.unregister(proxy);\n    }\n}\nfunction createProxy(ep, pendingListeners, path = [], target = function () { }) {\n    let isProxyReleased = false;\n    const proxy = new Proxy(target, {\n        get(_target, prop) {\n            throwIfProxyReleased(isProxyReleased);\n            if (prop === releaseProxy) {\n                return () => {\n                    unregisterProxy(proxy);\n                    releaseEndpoint(ep);\n                    pendingListeners.clear();\n                    isProxyReleased = true;\n                };\n            }\n            if (prop === \"then\") {\n                if (path.length === 0) {\n                    return { then: () => proxy };\n                }\n                const r = requestResponseMessage(ep, pendingListeners, {\n                    type: \"GET\" /* MessageType.GET */,\n                    path: path.map((p) => p.toString()),\n                }).then(fromWireValue);\n                return r.then.bind(r);\n            }\n            return createProxy(ep, pendingListeners, [...path, prop]);\n        },\n        set(_target, prop, rawValue) {\n            throwIfProxyReleased(isProxyReleased);\n            // FIXME: ES6 Proxy Handler `set` methods are supposed to return a\n            // boolean. To show good will, we return true asynchronously ¯\\_(ツ)_/¯\n            const [value, transferables] = toWireValue(rawValue);\n            return requestResponseMessage(ep, pendingListeners, {\n                type: \"SET\" /* MessageType.SET */,\n                path: [...path, prop].map((p) => p.toString()),\n                value,\n            }, transferables).then(fromWireValue);\n        },\n        apply(_target, _thisArg, rawArgumentList) {\n            throwIfProxyReleased(isProxyReleased);\n            const last = path[path.length - 1];\n            if (last === createEndpoint) {\n                return requestResponseMessage(ep, pendingListeners, {\n                    type: \"ENDPOINT\" /* MessageType.ENDPOINT */,\n                }).then(fromWireValue);\n            }\n            // We just pretend that `bind()` didn’t happen.\n            if (last === \"bind\") {\n                return createProxy(ep, pendingListeners, path.slice(0, -1));\n            }\n            const [argumentList, transferables] = processArguments(rawArgumentList);\n            return requestResponseMessage(ep, pendingListeners, {\n                type: \"APPLY\" /* MessageType.APPLY */,\n                path: path.map((p) => p.toString()),\n                argumentList,\n            }, transferables).then(fromWireValue);\n        },\n        construct(_target, rawArgumentList) {\n            throwIfProxyReleased(isProxyReleased);\n            const [argumentList, transferables] = processArguments(rawArgumentList);\n            return requestResponseMessage(ep, pendingListeners, {\n                type: \"CONSTRUCT\" /* MessageType.CONSTRUCT */,\n                path: path.map((p) => p.toString()),\n                argumentList,\n            }, transferables).then(fromWireValue);\n        },\n    });\n    registerProxy(proxy, ep);\n    return proxy;\n}\nfunction myFlat(arr) {\n    return Array.prototype.concat.apply([], arr);\n}\nfunction processArguments(argumentList) {\n    const processed = argumentList.map(toWireValue);\n    return [processed.map((v) => v[0]), myFlat(processed.map((v) => v[1]))];\n}\nconst transferCache = new WeakMap();\nfunction transfer(obj, transfers) {\n    transferCache.set(obj, transfers);\n    return obj;\n}\nfunction proxy(obj) {\n    return Object.assign(obj, { [proxyMarker]: true });\n}\nfunction windowEndpoint(w, context = globalThis, targetOrigin = \"*\") {\n    return {\n        postMessage: (msg, transferables) => w.postMessage(msg, targetOrigin, transferables),\n        addEventListener: context.addEventListener.bind(context),\n        removeEventListener: context.removeEventListener.bind(context),\n    };\n}\nfunction toWireValue(value) {\n    for (const [name, handler] of transferHandlers) {\n        if (handler.canHandle(value)) {\n            const [serializedValue, transferables] = handler.serialize(value);\n            return [\n                {\n                    type: \"HANDLER\" /* WireValueType.HANDLER */,\n                    name,\n                    value: serializedValue,\n                },\n                transferables,\n            ];\n        }\n    }\n    return [\n        {\n            type: \"RAW\" /* WireValueType.RAW */,\n            value,\n        },\n        transferCache.get(value) || [],\n    ];\n}\nfunction fromWireValue(value) {\n    switch (value.type) {\n        case \"HANDLER\" /* WireValueType.HANDLER */:\n            return transferHandlers.get(value.name).deserialize(value.value);\n        case \"RAW\" /* WireValueType.RAW */:\n            return value.value;\n    }\n}\nfunction requestResponseMessage(ep, pendingListeners, msg, transfers) {\n    return new Promise((resolve) => {\n        const id = generateUUID();\n        pendingListeners.set(id, resolve);\n        if (ep.start) {\n            ep.start();\n        }\n        ep.postMessage(Object.assign({ id }, msg), transfers);\n    });\n}\nfunction generateUUID() {\n    return new Array(4)\n        .fill(0)\n        .map(() => Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(16))\n        .join(\"-\");\n}\n\nexport { createEndpoint, expose, finalizer, proxy, proxyMarker, releaseProxy, transfer, transferHandlers, windowEndpoint, wrap };\n//# sourceMappingURL=comlink.mjs.map\n"],"names":["proxyMarker","createEndpoint","releaseProxy","finalizer","throwMarker","isObject","val","proxyTransferHandler","obj","port1","port2","expose","port","wrap","throwTransferHandler","value","serialized","transferHandlers","isAllowedOrigin","allowedOrigins","origin","allowedOrigin","ep","callback","ev","id","type","path","argumentList","fromWireValue","returnValue","parent","prop","rawValue","proxy","transfer","wireValue","transferables","toWireValue","closeEndPoint","error","isMessagePort","endpoint","target","pendingListeners","data","resolver","createProxy","throwIfProxyReleased","isReleased","releaseEndpoint","requestResponseMessage","proxyCounter","proxyFinalizers","newCount","registerProxy","unregisterProxy","isProxyReleased","_target","r","p","_thisArg","rawArgumentList","last","processArguments","myFlat","arr","processed","v","transferCache","transfers","name","handler","serializedValue","msg","resolve","generateUUID"],"mappings":"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","x_google_ignoreList":[0]}